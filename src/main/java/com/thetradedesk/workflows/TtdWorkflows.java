/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows;

import com.thetradedesk.workflows.utils.HTTPClient;
import com.thetradedesk.workflows.utils.Hook.SdkInitData;
import com.thetradedesk.workflows.utils.RetryConfig;
import com.thetradedesk.workflows.utils.SpeakeasyHTTPClient;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Workflows Service: ## Operations for commonly used workflows.
 * This service provides operations for commonly used workflows on The Trade Desk's platform.
 * In addition, this service provides generic operations for submitting:
 * 
 * <p>- GraphQL API requests
 * - REST API requests
 * 
 * <p>To interface with this service, we provide SDKs in multiple languages.
 * For each available language, there is a code sample displayed to the right of each operation.
 * 
 * <p>To get started with the SDK in your language of choice, see the associated guide:
 * 
 * <p>- Java - coming soon
 * - [Python](https://pypi.org/project/ttd-workflows/)
 * 
 * <p>For further explanation on the entities encountered in this documentation (e.g.,
 * [campaigns](https://partner.thetradedesk.com/v3/portal/api/doc/Campaigns) and
 * [ad groups](https://partner.thetradedesk.com/v3/portal/api/doc/AdGroup)), visit the
 * [Partner Portal](https://partner.thetradedesk.com/v3/portal/api/doc/ApiUseCases).
 */
public class TtdWorkflows {

    /**
     * AvailableServers contains identifiers for the servers available to the SDK.
     */
    public enum AvailableServers {
        /**
         * PROD
         * 
         * <p>The production environment.
         */
      PROD("prod"),
        /**
         * SANDBOX
         * 
         * <p>The sandbox environment for testing.
         */
      SANDBOX("sandbox");

        private final String server;

        private AvailableServers(String server) {
            this.server = server;
        }

        public String server() {
           return server;
        }
    }

    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    @SuppressWarnings("serial")
    public static final Map<AvailableServers, String> SERVERS = new HashMap<>() { {
    put(AvailableServers.PROD, "https://api.thetradedesk.com/workflows");
    put(AvailableServers.SANDBOX, "https://ext-api.sb.thetradedesk.com/workflows");
    }};

    

    private final AdGroup adGroup;

    private final Campaign campaign;

    private final Dmp dmp;

    private final GraphQLRequest graphQLRequest;

    private final JobStatus jobStatus;

    private final RESTRequest restRequest;

    public AdGroup adGroup() {
        return adGroup;
    }

    public Campaign campaign() {
        return campaign;
    }

    public Dmp dmp() {
        return dmp;
    }

    public GraphQLRequest graphQLRequest() {
        return graphQLRequest;
    }

    public JobStatus jobStatus() {
        return jobStatus;
    }

    public RESTRequest restRequest() {
        return restRequest;
    }
    private SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param ttdAuth The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder ttdAuth(String ttdAuth) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(com.thetradedesk.workflows.models.components.Security.builder()
              .ttdAuth(ttdAuth)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by name.
         *
         * @param server The server to use for all requests.
         * @return The builder instance.
         */
        public Builder server(AvailableServers server) {
            this.server = server.server();
            this.serverUrl = SERVERS.get(server);
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         *
         * Convenience method that calls {@link HTTPClient#enableDebugging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         *
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugging(enabled);
            return this;
        }

        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.thetradedesk.workflows.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.thetradedesk.workflows.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public TtdWorkflows build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS.get(AvailableServers.PROD);
                server = AvailableServers.PROD.server();
            }
            sdkConfiguration.setServerUrl(serverUrl);
            if (server != null) {
                sdkConfiguration.setServer(server);
            }
            return new TtdWorkflows(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private TtdWorkflows(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.adGroup = new AdGroup(sdkConfiguration);
        this.campaign = new Campaign(sdkConfiguration);
        this.dmp = new Dmp(sdkConfiguration);
        this.graphQLRequest = new GraphQLRequest(sdkConfiguration);
        this.jobStatus = new JobStatus(sdkConfiguration);
        this.restRequest = new RESTRequest(sdkConfiguration);
        
        SdkInitData data = this.sdkConfiguration.hooks().sdkInit(new SdkInitData(this.sdkConfiguration.resolvedServerUrl(), this.sdkConfiguration.client()));
        this.sdkConfiguration.setServerUrl(data.baseUrl());
        this.sdkConfiguration.setClient(data.client());
    }
}
