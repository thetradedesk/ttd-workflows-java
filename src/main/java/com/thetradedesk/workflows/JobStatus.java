/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows;

import static com.thetradedesk.workflows.operations.Operations.RequestOperation;

import com.thetradedesk.workflows.models.operations.GetGraphQlQueryJobStatusRequest;
import com.thetradedesk.workflows.models.operations.GetGraphQlQueryJobStatusRequestBuilder;
import com.thetradedesk.workflows.models.operations.GetGraphQlQueryJobStatusResponse;
import com.thetradedesk.workflows.models.operations.GetJobStatusRequest;
import com.thetradedesk.workflows.models.operations.GetJobStatusRequestBuilder;
import com.thetradedesk.workflows.models.operations.GetJobStatusResponse;
import com.thetradedesk.workflows.operations.GetGraphQlQueryJobStatusOperation;
import com.thetradedesk.workflows.operations.GetJobStatusOperation;
import com.thetradedesk.workflows.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class JobStatus {
    private final SDKConfiguration sdkConfiguration;

    JobStatus(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get the status of a previously submitted GraphQL query job.
     * 
     * <p>Use this operation to get a previously submitted GraphQL query job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * @return The call builder
     */
    public GetGraphQlQueryJobStatusRequestBuilder getGraphQlQueryJobStatus() {
        return new GetGraphQlQueryJobStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the status of a previously submitted GraphQL query job.
     * 
     * <p>Use this operation to get a previously submitted GraphQL query job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * @param id 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGraphQlQueryJobStatusResponse getGraphQlQueryJobStatus(String id) throws Exception {
        return getGraphQlQueryJobStatus(id, Optional.empty());
    }

    /**
     * Get the status of a previously submitted GraphQL query job.
     * 
     * <p>Use this operation to get a previously submitted GraphQL query job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * @param id 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGraphQlQueryJobStatusResponse getGraphQlQueryJobStatus(
            String id,
            Optional<Options> options) throws Exception {
        GetGraphQlQueryJobStatusRequest request =
            GetGraphQlQueryJobStatusRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetGraphQlQueryJobStatusRequest, GetGraphQlQueryJobStatusResponse> operation
              = new GetGraphQlQueryJobStatusOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get the status of a previously submitted job
     * 
     * <p>Use this operation to get a previously submitted job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * <p>Job results expire after 24 hours, at which point you will need to submit a new job.
     * 
     * @return The call builder
     */
    public GetJobStatusRequestBuilder getJobStatus() {
        return new GetJobStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the status of a previously submitted job
     * 
     * <p>Use this operation to get a previously submitted job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * <p>Job results expire after 24 hours, at which point you will need to submit a new job.
     * 
     * @param id 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetJobStatusResponse getJobStatus(long id) throws Exception {
        return getJobStatus(id, Optional.empty());
    }

    /**
     * Get the status of a previously submitted job
     * 
     * <p>Use this operation to get a previously submitted job's status and completion percentage.
     * Once a job is complete, this operation will return the URL from which to download the job results.
     * 
     * <p>Job results expire after 24 hours, at which point you will need to submit a new job.
     * 
     * @param id 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetJobStatusResponse getJobStatus(
            long id,
            Optional<Options> options) throws Exception {
        GetJobStatusRequest request =
            GetJobStatusRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetJobStatusRequest, GetJobStatusResponse> operation
              = new GetJobStatusOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
