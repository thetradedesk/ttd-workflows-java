/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CampaignUpdateWorkflowPrimaryInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    private JsonNullable<String> timeZone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customCPAClickWeight")
    private JsonNullable<Double> customCPAClickWeight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customCPAViewthroughWeight")
    private JsonNullable<Double> customCPAViewthroughWeight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customCPAType")
    private Optional<? extends CustomCPAType> customCPAType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impressionsOnlyBudgetingCpm")
    private JsonNullable<Double> impressionsOnlyBudgetingCpm;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budget")
    private Optional<? extends CampaignWorkflowBudgetInput> budget;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateInUtc")
    private JsonNullable<OffsetDateTime> endDateInUtc;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seedId")
    private JsonNullable<String> seedId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaignConversionReportingColumns")
    private JsonNullable<? extends List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryChannel")
    private Optional<? extends CampaignChannelType> primaryChannel;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryGoal")
    private Optional<? extends CampaignWorkflowROIGoalInput> primaryGoal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDateInUtc")
    private JsonNullable<OffsetDateTime> startDateInUtc;

    @JsonCreator
    public CampaignUpdateWorkflowPrimaryInput(
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("timeZone") JsonNullable<String> timeZone,
            @JsonProperty("customCPAClickWeight") JsonNullable<Double> customCPAClickWeight,
            @JsonProperty("customCPAViewthroughWeight") JsonNullable<Double> customCPAViewthroughWeight,
            @JsonProperty("customCPAType") Optional<? extends CustomCPAType> customCPAType,
            @JsonProperty("impressionsOnlyBudgetingCpm") JsonNullable<Double> impressionsOnlyBudgetingCpm,
            @JsonProperty("budget") Optional<? extends CampaignWorkflowBudgetInput> budget,
            @JsonProperty("endDateInUtc") JsonNullable<OffsetDateTime> endDateInUtc,
            @JsonProperty("seedId") JsonNullable<String> seedId,
            @JsonProperty("campaignConversionReportingColumns") JsonNullable<? extends List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("primaryChannel") Optional<? extends CampaignChannelType> primaryChannel,
            @JsonProperty("primaryGoal") Optional<? extends CampaignWorkflowROIGoalInput> primaryGoal,
            @JsonProperty("startDateInUtc") JsonNullable<OffsetDateTime> startDateInUtc) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(timeZone, "timeZone");
        Utils.checkNotNull(customCPAClickWeight, "customCPAClickWeight");
        Utils.checkNotNull(customCPAViewthroughWeight, "customCPAViewthroughWeight");
        Utils.checkNotNull(customCPAType, "customCPAType");
        Utils.checkNotNull(impressionsOnlyBudgetingCpm, "impressionsOnlyBudgetingCpm");
        Utils.checkNotNull(budget, "budget");
        Utils.checkNotNull(endDateInUtc, "endDateInUtc");
        Utils.checkNotNull(seedId, "seedId");
        Utils.checkNotNull(campaignConversionReportingColumns, "campaignConversionReportingColumns");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(primaryChannel, "primaryChannel");
        Utils.checkNotNull(primaryGoal, "primaryGoal");
        Utils.checkNotNull(startDateInUtc, "startDateInUtc");
        this.description = description;
        this.timeZone = timeZone;
        this.customCPAClickWeight = customCPAClickWeight;
        this.customCPAViewthroughWeight = customCPAViewthroughWeight;
        this.customCPAType = customCPAType;
        this.impressionsOnlyBudgetingCpm = impressionsOnlyBudgetingCpm;
        this.budget = budget;
        this.endDateInUtc = endDateInUtc;
        this.seedId = seedId;
        this.campaignConversionReportingColumns = campaignConversionReportingColumns;
        this.id = id;
        this.name = name;
        this.primaryChannel = primaryChannel;
        this.primaryGoal = primaryGoal;
        this.startDateInUtc = startDateInUtc;
    }
    
    public CampaignUpdateWorkflowPrimaryInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public JsonNullable<String> timeZone() {
        return timeZone;
    }

    @JsonIgnore
    public JsonNullable<Double> customCPAClickWeight() {
        return customCPAClickWeight;
    }

    @JsonIgnore
    public JsonNullable<Double> customCPAViewthroughWeight() {
        return customCPAViewthroughWeight;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomCPAType> customCPAType() {
        return (Optional<CustomCPAType>) customCPAType;
    }

    @JsonIgnore
    public JsonNullable<Double> impressionsOnlyBudgetingCpm() {
        return impressionsOnlyBudgetingCpm;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CampaignWorkflowBudgetInput> budget() {
        return (Optional<CampaignWorkflowBudgetInput>) budget;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> endDateInUtc() {
        return endDateInUtc;
    }

    @JsonIgnore
    public JsonNullable<String> seedId() {
        return seedId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns() {
        return (JsonNullable<List<CampaignWorkflowCampaignConversionReportingColumnInput>>) campaignConversionReportingColumns;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CampaignChannelType> primaryChannel() {
        return (Optional<CampaignChannelType>) primaryChannel;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CampaignWorkflowROIGoalInput> primaryGoal() {
        return (Optional<CampaignWorkflowROIGoalInput>) primaryGoal;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDateInUtc() {
        return startDateInUtc;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CampaignUpdateWorkflowPrimaryInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withTimeZone(String timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = JsonNullable.of(timeZone);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withTimeZone(JsonNullable<String> timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = timeZone;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAClickWeight(double customCPAClickWeight) {
        Utils.checkNotNull(customCPAClickWeight, "customCPAClickWeight");
        this.customCPAClickWeight = JsonNullable.of(customCPAClickWeight);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAClickWeight(JsonNullable<Double> customCPAClickWeight) {
        Utils.checkNotNull(customCPAClickWeight, "customCPAClickWeight");
        this.customCPAClickWeight = customCPAClickWeight;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAViewthroughWeight(double customCPAViewthroughWeight) {
        Utils.checkNotNull(customCPAViewthroughWeight, "customCPAViewthroughWeight");
        this.customCPAViewthroughWeight = JsonNullable.of(customCPAViewthroughWeight);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAViewthroughWeight(JsonNullable<Double> customCPAViewthroughWeight) {
        Utils.checkNotNull(customCPAViewthroughWeight, "customCPAViewthroughWeight");
        this.customCPAViewthroughWeight = customCPAViewthroughWeight;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAType(CustomCPAType customCPAType) {
        Utils.checkNotNull(customCPAType, "customCPAType");
        this.customCPAType = Optional.ofNullable(customCPAType);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCustomCPAType(Optional<? extends CustomCPAType> customCPAType) {
        Utils.checkNotNull(customCPAType, "customCPAType");
        this.customCPAType = customCPAType;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withImpressionsOnlyBudgetingCpm(double impressionsOnlyBudgetingCpm) {
        Utils.checkNotNull(impressionsOnlyBudgetingCpm, "impressionsOnlyBudgetingCpm");
        this.impressionsOnlyBudgetingCpm = JsonNullable.of(impressionsOnlyBudgetingCpm);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withImpressionsOnlyBudgetingCpm(JsonNullable<Double> impressionsOnlyBudgetingCpm) {
        Utils.checkNotNull(impressionsOnlyBudgetingCpm, "impressionsOnlyBudgetingCpm");
        this.impressionsOnlyBudgetingCpm = impressionsOnlyBudgetingCpm;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withBudget(CampaignWorkflowBudgetInput budget) {
        Utils.checkNotNull(budget, "budget");
        this.budget = Optional.ofNullable(budget);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withBudget(Optional<? extends CampaignWorkflowBudgetInput> budget) {
        Utils.checkNotNull(budget, "budget");
        this.budget = budget;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withEndDateInUtc(OffsetDateTime endDateInUtc) {
        Utils.checkNotNull(endDateInUtc, "endDateInUtc");
        this.endDateInUtc = JsonNullable.of(endDateInUtc);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withEndDateInUtc(JsonNullable<OffsetDateTime> endDateInUtc) {
        Utils.checkNotNull(endDateInUtc, "endDateInUtc");
        this.endDateInUtc = endDateInUtc;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withSeedId(String seedId) {
        Utils.checkNotNull(seedId, "seedId");
        this.seedId = JsonNullable.of(seedId);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withSeedId(JsonNullable<String> seedId) {
        Utils.checkNotNull(seedId, "seedId");
        this.seedId = seedId;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCampaignConversionReportingColumns(List<CampaignWorkflowCampaignConversionReportingColumnInput> campaignConversionReportingColumns) {
        Utils.checkNotNull(campaignConversionReportingColumns, "campaignConversionReportingColumns");
        this.campaignConversionReportingColumns = JsonNullable.of(campaignConversionReportingColumns);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withCampaignConversionReportingColumns(JsonNullable<? extends List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns) {
        Utils.checkNotNull(campaignConversionReportingColumns, "campaignConversionReportingColumns");
        this.campaignConversionReportingColumns = campaignConversionReportingColumns;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withPrimaryChannel(CampaignChannelType primaryChannel) {
        Utils.checkNotNull(primaryChannel, "primaryChannel");
        this.primaryChannel = Optional.ofNullable(primaryChannel);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withPrimaryChannel(Optional<? extends CampaignChannelType> primaryChannel) {
        Utils.checkNotNull(primaryChannel, "primaryChannel");
        this.primaryChannel = primaryChannel;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withPrimaryGoal(CampaignWorkflowROIGoalInput primaryGoal) {
        Utils.checkNotNull(primaryGoal, "primaryGoal");
        this.primaryGoal = Optional.ofNullable(primaryGoal);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withPrimaryGoal(Optional<? extends CampaignWorkflowROIGoalInput> primaryGoal) {
        Utils.checkNotNull(primaryGoal, "primaryGoal");
        this.primaryGoal = primaryGoal;
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withStartDateInUtc(OffsetDateTime startDateInUtc) {
        Utils.checkNotNull(startDateInUtc, "startDateInUtc");
        this.startDateInUtc = JsonNullable.of(startDateInUtc);
        return this;
    }

    public CampaignUpdateWorkflowPrimaryInput withStartDateInUtc(JsonNullable<OffsetDateTime> startDateInUtc) {
        Utils.checkNotNull(startDateInUtc, "startDateInUtc");
        this.startDateInUtc = startDateInUtc;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CampaignUpdateWorkflowPrimaryInput other = (CampaignUpdateWorkflowPrimaryInput) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.timeZone, other.timeZone) &&
            Objects.deepEquals(this.customCPAClickWeight, other.customCPAClickWeight) &&
            Objects.deepEquals(this.customCPAViewthroughWeight, other.customCPAViewthroughWeight) &&
            Objects.deepEquals(this.customCPAType, other.customCPAType) &&
            Objects.deepEquals(this.impressionsOnlyBudgetingCpm, other.impressionsOnlyBudgetingCpm) &&
            Objects.deepEquals(this.budget, other.budget) &&
            Objects.deepEquals(this.endDateInUtc, other.endDateInUtc) &&
            Objects.deepEquals(this.seedId, other.seedId) &&
            Objects.deepEquals(this.campaignConversionReportingColumns, other.campaignConversionReportingColumns) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.primaryChannel, other.primaryChannel) &&
            Objects.deepEquals(this.primaryGoal, other.primaryGoal) &&
            Objects.deepEquals(this.startDateInUtc, other.startDateInUtc);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            timeZone,
            customCPAClickWeight,
            customCPAViewthroughWeight,
            customCPAType,
            impressionsOnlyBudgetingCpm,
            budget,
            endDateInUtc,
            seedId,
            campaignConversionReportingColumns,
            id,
            name,
            primaryChannel,
            primaryGoal,
            startDateInUtc);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CampaignUpdateWorkflowPrimaryInput.class,
                "description", description,
                "timeZone", timeZone,
                "customCPAClickWeight", customCPAClickWeight,
                "customCPAViewthroughWeight", customCPAViewthroughWeight,
                "customCPAType", customCPAType,
                "impressionsOnlyBudgetingCpm", impressionsOnlyBudgetingCpm,
                "budget", budget,
                "endDateInUtc", endDateInUtc,
                "seedId", seedId,
                "campaignConversionReportingColumns", campaignConversionReportingColumns,
                "id", id,
                "name", name,
                "primaryChannel", primaryChannel,
                "primaryGoal", primaryGoal,
                "startDateInUtc", startDateInUtc);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> timeZone = JsonNullable.undefined();
 
        private JsonNullable<Double> customCPAClickWeight = JsonNullable.undefined();
 
        private JsonNullable<Double> customCPAViewthroughWeight = JsonNullable.undefined();
 
        private Optional<? extends CustomCPAType> customCPAType = Optional.empty();
 
        private JsonNullable<Double> impressionsOnlyBudgetingCpm = JsonNullable.undefined();
 
        private Optional<? extends CampaignWorkflowBudgetInput> budget = Optional.empty();
 
        private JsonNullable<OffsetDateTime> endDateInUtc = JsonNullable.undefined();
 
        private JsonNullable<String> seedId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns = JsonNullable.undefined();
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private Optional<? extends CampaignChannelType> primaryChannel = Optional.empty();
 
        private Optional<? extends CampaignWorkflowROIGoalInput> primaryGoal = Optional.empty();
 
        private JsonNullable<OffsetDateTime> startDateInUtc = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder timeZone(String timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = JsonNullable.of(timeZone);
            return this;
        }

        public Builder timeZone(JsonNullable<String> timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = timeZone;
            return this;
        }

        public Builder customCPAClickWeight(double customCPAClickWeight) {
            Utils.checkNotNull(customCPAClickWeight, "customCPAClickWeight");
            this.customCPAClickWeight = JsonNullable.of(customCPAClickWeight);
            return this;
        }

        public Builder customCPAClickWeight(JsonNullable<Double> customCPAClickWeight) {
            Utils.checkNotNull(customCPAClickWeight, "customCPAClickWeight");
            this.customCPAClickWeight = customCPAClickWeight;
            return this;
        }

        public Builder customCPAViewthroughWeight(double customCPAViewthroughWeight) {
            Utils.checkNotNull(customCPAViewthroughWeight, "customCPAViewthroughWeight");
            this.customCPAViewthroughWeight = JsonNullable.of(customCPAViewthroughWeight);
            return this;
        }

        public Builder customCPAViewthroughWeight(JsonNullable<Double> customCPAViewthroughWeight) {
            Utils.checkNotNull(customCPAViewthroughWeight, "customCPAViewthroughWeight");
            this.customCPAViewthroughWeight = customCPAViewthroughWeight;
            return this;
        }

        public Builder customCPAType(CustomCPAType customCPAType) {
            Utils.checkNotNull(customCPAType, "customCPAType");
            this.customCPAType = Optional.ofNullable(customCPAType);
            return this;
        }

        public Builder customCPAType(Optional<? extends CustomCPAType> customCPAType) {
            Utils.checkNotNull(customCPAType, "customCPAType");
            this.customCPAType = customCPAType;
            return this;
        }

        public Builder impressionsOnlyBudgetingCpm(double impressionsOnlyBudgetingCpm) {
            Utils.checkNotNull(impressionsOnlyBudgetingCpm, "impressionsOnlyBudgetingCpm");
            this.impressionsOnlyBudgetingCpm = JsonNullable.of(impressionsOnlyBudgetingCpm);
            return this;
        }

        public Builder impressionsOnlyBudgetingCpm(JsonNullable<Double> impressionsOnlyBudgetingCpm) {
            Utils.checkNotNull(impressionsOnlyBudgetingCpm, "impressionsOnlyBudgetingCpm");
            this.impressionsOnlyBudgetingCpm = impressionsOnlyBudgetingCpm;
            return this;
        }

        public Builder budget(CampaignWorkflowBudgetInput budget) {
            Utils.checkNotNull(budget, "budget");
            this.budget = Optional.ofNullable(budget);
            return this;
        }

        public Builder budget(Optional<? extends CampaignWorkflowBudgetInput> budget) {
            Utils.checkNotNull(budget, "budget");
            this.budget = budget;
            return this;
        }

        public Builder endDateInUtc(OffsetDateTime endDateInUtc) {
            Utils.checkNotNull(endDateInUtc, "endDateInUtc");
            this.endDateInUtc = JsonNullable.of(endDateInUtc);
            return this;
        }

        public Builder endDateInUtc(JsonNullable<OffsetDateTime> endDateInUtc) {
            Utils.checkNotNull(endDateInUtc, "endDateInUtc");
            this.endDateInUtc = endDateInUtc;
            return this;
        }

        public Builder seedId(String seedId) {
            Utils.checkNotNull(seedId, "seedId");
            this.seedId = JsonNullable.of(seedId);
            return this;
        }

        public Builder seedId(JsonNullable<String> seedId) {
            Utils.checkNotNull(seedId, "seedId");
            this.seedId = seedId;
            return this;
        }

        public Builder campaignConversionReportingColumns(List<CampaignWorkflowCampaignConversionReportingColumnInput> campaignConversionReportingColumns) {
            Utils.checkNotNull(campaignConversionReportingColumns, "campaignConversionReportingColumns");
            this.campaignConversionReportingColumns = JsonNullable.of(campaignConversionReportingColumns);
            return this;
        }

        public Builder campaignConversionReportingColumns(JsonNullable<? extends List<CampaignWorkflowCampaignConversionReportingColumnInput>> campaignConversionReportingColumns) {
            Utils.checkNotNull(campaignConversionReportingColumns, "campaignConversionReportingColumns");
            this.campaignConversionReportingColumns = campaignConversionReportingColumns;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder primaryChannel(CampaignChannelType primaryChannel) {
            Utils.checkNotNull(primaryChannel, "primaryChannel");
            this.primaryChannel = Optional.ofNullable(primaryChannel);
            return this;
        }

        public Builder primaryChannel(Optional<? extends CampaignChannelType> primaryChannel) {
            Utils.checkNotNull(primaryChannel, "primaryChannel");
            this.primaryChannel = primaryChannel;
            return this;
        }

        public Builder primaryGoal(CampaignWorkflowROIGoalInput primaryGoal) {
            Utils.checkNotNull(primaryGoal, "primaryGoal");
            this.primaryGoal = Optional.ofNullable(primaryGoal);
            return this;
        }

        public Builder primaryGoal(Optional<? extends CampaignWorkflowROIGoalInput> primaryGoal) {
            Utils.checkNotNull(primaryGoal, "primaryGoal");
            this.primaryGoal = primaryGoal;
            return this;
        }

        public Builder startDateInUtc(OffsetDateTime startDateInUtc) {
            Utils.checkNotNull(startDateInUtc, "startDateInUtc");
            this.startDateInUtc = JsonNullable.of(startDateInUtc);
            return this;
        }

        public Builder startDateInUtc(JsonNullable<OffsetDateTime> startDateInUtc) {
            Utils.checkNotNull(startDateInUtc, "startDateInUtc");
            this.startDateInUtc = startDateInUtc;
            return this;
        }
        
        public CampaignUpdateWorkflowPrimaryInput build() {
            return new CampaignUpdateWorkflowPrimaryInput(
                description,
                timeZone,
                customCPAClickWeight,
                customCPAViewthroughWeight,
                customCPAType,
                impressionsOnlyBudgetingCpm,
                budget,
                endDateInUtc,
                seedId,
                campaignConversionReportingColumns,
                id,
                name,
                primaryChannel,
                primaryGoal,
                startDateInUtc);
        }
    }
}
