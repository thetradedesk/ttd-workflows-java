/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GraphQLQueryInput
 * 
 * <p>Required fields for executing a GraphQL query
 */
public class GraphQLQueryInput {

    /**
     * The GraphQL query to execute.
     */
    @JsonProperty("query")
    private String query;

    /**
     * Variables to substitute into the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variables")
    private JsonNullable<? extends Variables> variables;

    @JsonCreator
    public GraphQLQueryInput(
            @JsonProperty("query") String query,
            @JsonProperty("variables") JsonNullable<? extends Variables> variables) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(variables, "variables");
        this.query = query;
        this.variables = variables;
    }
    
    public GraphQLQueryInput(
            String query) {
        this(query, JsonNullable.undefined());
    }

    /**
     * The GraphQL query to execute.
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Variables to substitute into the query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Variables> variables() {
        return (JsonNullable<Variables>) variables;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The GraphQL query to execute.
     */
    public GraphQLQueryInput withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Variables to substitute into the query.
     */
    public GraphQLQueryInput withVariables(Variables variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = JsonNullable.of(variables);
        return this;
    }

    /**
     * Variables to substitute into the query.
     */
    public GraphQLQueryInput withVariables(JsonNullable<? extends Variables> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = variables;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GraphQLQueryInput other = (GraphQLQueryInput) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.variables, other.variables);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            variables);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GraphQLQueryInput.class,
                "query", query,
                "variables", variables);
    }
    
    public final static class Builder {
 
        private String query;
 
        private JsonNullable<? extends Variables> variables = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The GraphQL query to execute.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Variables to substitute into the query.
         */
        public Builder variables(Variables variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = JsonNullable.of(variables);
            return this;
        }

        /**
         * Variables to substitute into the query.
         */
        public Builder variables(JsonNullable<? extends Variables> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = variables;
            return this;
        }
        
        public GraphQLQueryInput build() {
            return new GraphQLQueryInput(
                query,
                variables);
        }
    }
}
