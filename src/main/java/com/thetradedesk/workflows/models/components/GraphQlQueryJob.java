/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GraphQlQueryJob
 * 
 * <p>This is the response model that mirrors the GQL bulkjob
 */
public class GraphQlQueryJob {

    /**
     * The ID of the job.
     */
    @JsonProperty("id")
    private long id;

    /**
     * The UTC data and time that the job completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedAt")
    private JsonNullable<OffsetDateTime> completedAt;

    /**
     * The job completion percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionPercentage")
    private JsonNullable<Float> completionPercentage;

    /**
     * Time of creation for that bulk job in UTC.
     */
    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("status")
    private BulkJobStatus status;

    /**
     * The URL from which the job result can be downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawResult")
    private JsonNullable<String> rawResult;

    /**
     * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryGqlErrors")
    private JsonNullable<? extends List<String>> queryGqlErrors;

    /**
     * Errors encountered while executing the job
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("runtimeErrors")
    private Optional<? extends List<String>> runtimeErrors;

    @JsonCreator
    public GraphQlQueryJob(
            @JsonProperty("id") long id,
            @JsonProperty("completedAt") JsonNullable<OffsetDateTime> completedAt,
            @JsonProperty("completionPercentage") JsonNullable<Float> completionPercentage,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("status") BulkJobStatus status,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("rawResult") JsonNullable<String> rawResult,
            @JsonProperty("queryGqlErrors") JsonNullable<? extends List<String>> queryGqlErrors,
            @JsonProperty("runtimeErrors") Optional<? extends List<String>> runtimeErrors) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(completedAt, "completedAt");
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(rawResult, "rawResult");
        Utils.checkNotNull(queryGqlErrors, "queryGqlErrors");
        Utils.checkNotNull(runtimeErrors, "runtimeErrors");
        this.id = id;
        this.completedAt = completedAt;
        this.completionPercentage = completionPercentage;
        this.createdAt = createdAt;
        this.status = status;
        this.url = url;
        this.rawResult = rawResult;
        this.queryGqlErrors = queryGqlErrors;
        this.runtimeErrors = runtimeErrors;
    }
    
    public GraphQlQueryJob(
            long id,
            OffsetDateTime createdAt,
            BulkJobStatus status) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), createdAt, status, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the job.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * The UTC data and time that the job completed.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> completedAt() {
        return completedAt;
    }

    /**
     * The job completion percentage.
     */
    @JsonIgnore
    public JsonNullable<Float> completionPercentage() {
        return completionPercentage;
    }

    /**
     * Time of creation for that bulk job in UTC.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public BulkJobStatus status() {
        return status;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    @JsonIgnore
    public JsonNullable<String> rawResult() {
        return rawResult;
    }

    /**
     * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> queryGqlErrors() {
        return (JsonNullable<List<String>>) queryGqlErrors;
    }

    /**
     * Errors encountered while executing the job
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> runtimeErrors() {
        return (Optional<List<String>>) runtimeErrors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the job.
     */
    public GraphQlQueryJob withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The UTC data and time that the job completed.
     */
    public GraphQlQueryJob withCompletedAt(OffsetDateTime completedAt) {
        Utils.checkNotNull(completedAt, "completedAt");
        this.completedAt = JsonNullable.of(completedAt);
        return this;
    }

    /**
     * The UTC data and time that the job completed.
     */
    public GraphQlQueryJob withCompletedAt(JsonNullable<OffsetDateTime> completedAt) {
        Utils.checkNotNull(completedAt, "completedAt");
        this.completedAt = completedAt;
        return this;
    }

    /**
     * The job completion percentage.
     */
    public GraphQlQueryJob withCompletionPercentage(float completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = JsonNullable.of(completionPercentage);
        return this;
    }

    /**
     * The job completion percentage.
     */
    public GraphQlQueryJob withCompletionPercentage(JsonNullable<Float> completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = completionPercentage;
        return this;
    }

    /**
     * Time of creation for that bulk job in UTC.
     */
    public GraphQlQueryJob withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public GraphQlQueryJob withStatus(BulkJobStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    public GraphQlQueryJob withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    public GraphQlQueryJob withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    public GraphQlQueryJob withRawResult(String rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = JsonNullable.of(rawResult);
        return this;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    public GraphQlQueryJob withRawResult(JsonNullable<String> rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = rawResult;
        return this;
    }

    /**
     * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
     */
    public GraphQlQueryJob withQueryGqlErrors(List<String> queryGqlErrors) {
        Utils.checkNotNull(queryGqlErrors, "queryGqlErrors");
        this.queryGqlErrors = JsonNullable.of(queryGqlErrors);
        return this;
    }

    /**
     * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
     */
    public GraphQlQueryJob withQueryGqlErrors(JsonNullable<? extends List<String>> queryGqlErrors) {
        Utils.checkNotNull(queryGqlErrors, "queryGqlErrors");
        this.queryGqlErrors = queryGqlErrors;
        return this;
    }

    /**
     * Errors encountered while executing the job
     */
    public GraphQlQueryJob withRuntimeErrors(List<String> runtimeErrors) {
        Utils.checkNotNull(runtimeErrors, "runtimeErrors");
        this.runtimeErrors = Optional.ofNullable(runtimeErrors);
        return this;
    }

    /**
     * Errors encountered while executing the job
     */
    public GraphQlQueryJob withRuntimeErrors(Optional<? extends List<String>> runtimeErrors) {
        Utils.checkNotNull(runtimeErrors, "runtimeErrors");
        this.runtimeErrors = runtimeErrors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GraphQlQueryJob other = (GraphQlQueryJob) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.completedAt, other.completedAt) &&
            Objects.deepEquals(this.completionPercentage, other.completionPercentage) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.rawResult, other.rawResult) &&
            Objects.deepEquals(this.queryGqlErrors, other.queryGqlErrors) &&
            Objects.deepEquals(this.runtimeErrors, other.runtimeErrors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            completedAt,
            completionPercentage,
            createdAt,
            status,
            url,
            rawResult,
            queryGqlErrors,
            runtimeErrors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GraphQlQueryJob.class,
                "id", id,
                "completedAt", completedAt,
                "completionPercentage", completionPercentage,
                "createdAt", createdAt,
                "status", status,
                "url", url,
                "rawResult", rawResult,
                "queryGqlErrors", queryGqlErrors,
                "runtimeErrors", runtimeErrors);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private JsonNullable<OffsetDateTime> completedAt = JsonNullable.undefined();
 
        private JsonNullable<Float> completionPercentage = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private BulkJobStatus status;
 
        private JsonNullable<String> url = JsonNullable.undefined();
 
        private JsonNullable<String> rawResult = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> queryGqlErrors = JsonNullable.undefined();
 
        private Optional<? extends List<String>> runtimeErrors = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the job.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The UTC data and time that the job completed.
         */
        public Builder completedAt(OffsetDateTime completedAt) {
            Utils.checkNotNull(completedAt, "completedAt");
            this.completedAt = JsonNullable.of(completedAt);
            return this;
        }

        /**
         * The UTC data and time that the job completed.
         */
        public Builder completedAt(JsonNullable<OffsetDateTime> completedAt) {
            Utils.checkNotNull(completedAt, "completedAt");
            this.completedAt = completedAt;
            return this;
        }

        /**
         * The job completion percentage.
         */
        public Builder completionPercentage(float completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = JsonNullable.of(completionPercentage);
            return this;
        }

        /**
         * The job completion percentage.
         */
        public Builder completionPercentage(JsonNullable<Float> completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = completionPercentage;
            return this;
        }

        /**
         * Time of creation for that bulk job in UTC.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder status(BulkJobStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The URL from which the job result can be downloaded.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The URL from which the job result can be downloaded.
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The raw job result if the response is less than or equal to 20MB in size.
         * If the job result is larger than 20MB, then null is returned.
         */
        public Builder rawResult(String rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = JsonNullable.of(rawResult);
            return this;
        }

        /**
         * The raw job result if the response is less than or equal to 20MB in size.
         * If the job result is larger than 20MB, then null is returned.
         */
        public Builder rawResult(JsonNullable<String> rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = rawResult;
            return this;
        }

        /**
         * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
         */
        public Builder queryGqlErrors(List<String> queryGqlErrors) {
            Utils.checkNotNull(queryGqlErrors, "queryGqlErrors");
            this.queryGqlErrors = JsonNullable.of(queryGqlErrors);
            return this;
        }

        /**
         * If the GQL requests within the job hard failed (such as from an authorization error or an internal server error), the causes encountered during execution
         */
        public Builder queryGqlErrors(JsonNullable<? extends List<String>> queryGqlErrors) {
            Utils.checkNotNull(queryGqlErrors, "queryGqlErrors");
            this.queryGqlErrors = queryGqlErrors;
            return this;
        }

        /**
         * Errors encountered while executing the job
         */
        public Builder runtimeErrors(List<String> runtimeErrors) {
            Utils.checkNotNull(runtimeErrors, "runtimeErrors");
            this.runtimeErrors = Optional.ofNullable(runtimeErrors);
            return this;
        }

        /**
         * Errors encountered while executing the job
         */
        public Builder runtimeErrors(Optional<? extends List<String>> runtimeErrors) {
            Utils.checkNotNull(runtimeErrors, "runtimeErrors");
            this.runtimeErrors = runtimeErrors;
            return this;
        }
        
        public GraphQlQueryJob build() {
            return new GraphQlQueryJob(
                id,
                completedAt,
                completionPercentage,
                createdAt,
                status,
                url,
                rawResult,
                queryGqlErrors,
                runtimeErrors);
        }
    }
}
