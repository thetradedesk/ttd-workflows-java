/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class AdGroupAudienceTargeting {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceId")
    private JsonNullable<String> audienceId;

    @JsonProperty("audienceAcceleratorExclusionsEnabled")
    private boolean audienceAcceleratorExclusionsEnabled;

    @JsonProperty("audienceBoosterEnabled")
    private boolean audienceBoosterEnabled;

    @JsonProperty("audienceExcluderEnabled")
    private boolean audienceExcluderEnabled;

    @JsonProperty("audiencePredictorEnabled")
    private boolean audiencePredictorEnabled;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("crossDeviceVendorListForAudience")
    private Optional<? extends List<Integer>> crossDeviceVendorListForAudience;

    @JsonProperty("recencyExclusionWindowInMinutes")
    private int recencyExclusionWindowInMinutes;

    @JsonProperty("targetTrackableUsersEnabled")
    private boolean targetTrackableUsersEnabled;

    @JsonProperty("useMcIdAsPrimary")
    private boolean useMcIdAsPrimary;

    @JsonCreator
    public AdGroupAudienceTargeting(
            @JsonProperty("audienceId") JsonNullable<String> audienceId,
            @JsonProperty("audienceAcceleratorExclusionsEnabled") boolean audienceAcceleratorExclusionsEnabled,
            @JsonProperty("audienceBoosterEnabled") boolean audienceBoosterEnabled,
            @JsonProperty("audienceExcluderEnabled") boolean audienceExcluderEnabled,
            @JsonProperty("audiencePredictorEnabled") boolean audiencePredictorEnabled,
            @JsonProperty("crossDeviceVendorListForAudience") Optional<? extends List<Integer>> crossDeviceVendorListForAudience,
            @JsonProperty("recencyExclusionWindowInMinutes") int recencyExclusionWindowInMinutes,
            @JsonProperty("targetTrackableUsersEnabled") boolean targetTrackableUsersEnabled,
            @JsonProperty("useMcIdAsPrimary") boolean useMcIdAsPrimary) {
        Utils.checkNotNull(audienceId, "audienceId");
        Utils.checkNotNull(audienceAcceleratorExclusionsEnabled, "audienceAcceleratorExclusionsEnabled");
        Utils.checkNotNull(audienceBoosterEnabled, "audienceBoosterEnabled");
        Utils.checkNotNull(audienceExcluderEnabled, "audienceExcluderEnabled");
        Utils.checkNotNull(audiencePredictorEnabled, "audiencePredictorEnabled");
        Utils.checkNotNull(crossDeviceVendorListForAudience, "crossDeviceVendorListForAudience");
        Utils.checkNotNull(recencyExclusionWindowInMinutes, "recencyExclusionWindowInMinutes");
        Utils.checkNotNull(targetTrackableUsersEnabled, "targetTrackableUsersEnabled");
        Utils.checkNotNull(useMcIdAsPrimary, "useMcIdAsPrimary");
        this.audienceId = audienceId;
        this.audienceAcceleratorExclusionsEnabled = audienceAcceleratorExclusionsEnabled;
        this.audienceBoosterEnabled = audienceBoosterEnabled;
        this.audienceExcluderEnabled = audienceExcluderEnabled;
        this.audiencePredictorEnabled = audiencePredictorEnabled;
        this.crossDeviceVendorListForAudience = crossDeviceVendorListForAudience;
        this.recencyExclusionWindowInMinutes = recencyExclusionWindowInMinutes;
        this.targetTrackableUsersEnabled = targetTrackableUsersEnabled;
        this.useMcIdAsPrimary = useMcIdAsPrimary;
    }
    
    public AdGroupAudienceTargeting(
            boolean audienceAcceleratorExclusionsEnabled,
            boolean audienceBoosterEnabled,
            boolean audienceExcluderEnabled,
            boolean audiencePredictorEnabled,
            int recencyExclusionWindowInMinutes,
            boolean targetTrackableUsersEnabled,
            boolean useMcIdAsPrimary) {
        this(JsonNullable.undefined(), audienceAcceleratorExclusionsEnabled, audienceBoosterEnabled, audienceExcluderEnabled, audiencePredictorEnabled, Optional.empty(), recencyExclusionWindowInMinutes, targetTrackableUsersEnabled, useMcIdAsPrimary);
    }

    @JsonIgnore
    public JsonNullable<String> audienceId() {
        return audienceId;
    }

    @JsonIgnore
    public boolean audienceAcceleratorExclusionsEnabled() {
        return audienceAcceleratorExclusionsEnabled;
    }

    @JsonIgnore
    public boolean audienceBoosterEnabled() {
        return audienceBoosterEnabled;
    }

    @JsonIgnore
    public boolean audienceExcluderEnabled() {
        return audienceExcluderEnabled;
    }

    @JsonIgnore
    public boolean audiencePredictorEnabled() {
        return audiencePredictorEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Integer>> crossDeviceVendorListForAudience() {
        return (Optional<List<Integer>>) crossDeviceVendorListForAudience;
    }

    @JsonIgnore
    public int recencyExclusionWindowInMinutes() {
        return recencyExclusionWindowInMinutes;
    }

    @JsonIgnore
    public boolean targetTrackableUsersEnabled() {
        return targetTrackableUsersEnabled;
    }

    @JsonIgnore
    public boolean useMcIdAsPrimary() {
        return useMcIdAsPrimary;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AdGroupAudienceTargeting withAudienceId(String audienceId) {
        Utils.checkNotNull(audienceId, "audienceId");
        this.audienceId = JsonNullable.of(audienceId);
        return this;
    }

    public AdGroupAudienceTargeting withAudienceId(JsonNullable<String> audienceId) {
        Utils.checkNotNull(audienceId, "audienceId");
        this.audienceId = audienceId;
        return this;
    }

    public AdGroupAudienceTargeting withAudienceAcceleratorExclusionsEnabled(boolean audienceAcceleratorExclusionsEnabled) {
        Utils.checkNotNull(audienceAcceleratorExclusionsEnabled, "audienceAcceleratorExclusionsEnabled");
        this.audienceAcceleratorExclusionsEnabled = audienceAcceleratorExclusionsEnabled;
        return this;
    }

    public AdGroupAudienceTargeting withAudienceBoosterEnabled(boolean audienceBoosterEnabled) {
        Utils.checkNotNull(audienceBoosterEnabled, "audienceBoosterEnabled");
        this.audienceBoosterEnabled = audienceBoosterEnabled;
        return this;
    }

    public AdGroupAudienceTargeting withAudienceExcluderEnabled(boolean audienceExcluderEnabled) {
        Utils.checkNotNull(audienceExcluderEnabled, "audienceExcluderEnabled");
        this.audienceExcluderEnabled = audienceExcluderEnabled;
        return this;
    }

    public AdGroupAudienceTargeting withAudiencePredictorEnabled(boolean audiencePredictorEnabled) {
        Utils.checkNotNull(audiencePredictorEnabled, "audiencePredictorEnabled");
        this.audiencePredictorEnabled = audiencePredictorEnabled;
        return this;
    }

    public AdGroupAudienceTargeting withCrossDeviceVendorListForAudience(List<Integer> crossDeviceVendorListForAudience) {
        Utils.checkNotNull(crossDeviceVendorListForAudience, "crossDeviceVendorListForAudience");
        this.crossDeviceVendorListForAudience = Optional.ofNullable(crossDeviceVendorListForAudience);
        return this;
    }

    public AdGroupAudienceTargeting withCrossDeviceVendorListForAudience(Optional<? extends List<Integer>> crossDeviceVendorListForAudience) {
        Utils.checkNotNull(crossDeviceVendorListForAudience, "crossDeviceVendorListForAudience");
        this.crossDeviceVendorListForAudience = crossDeviceVendorListForAudience;
        return this;
    }

    public AdGroupAudienceTargeting withRecencyExclusionWindowInMinutes(int recencyExclusionWindowInMinutes) {
        Utils.checkNotNull(recencyExclusionWindowInMinutes, "recencyExclusionWindowInMinutes");
        this.recencyExclusionWindowInMinutes = recencyExclusionWindowInMinutes;
        return this;
    }

    public AdGroupAudienceTargeting withTargetTrackableUsersEnabled(boolean targetTrackableUsersEnabled) {
        Utils.checkNotNull(targetTrackableUsersEnabled, "targetTrackableUsersEnabled");
        this.targetTrackableUsersEnabled = targetTrackableUsersEnabled;
        return this;
    }

    public AdGroupAudienceTargeting withUseMcIdAsPrimary(boolean useMcIdAsPrimary) {
        Utils.checkNotNull(useMcIdAsPrimary, "useMcIdAsPrimary");
        this.useMcIdAsPrimary = useMcIdAsPrimary;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdGroupAudienceTargeting other = (AdGroupAudienceTargeting) o;
        return 
            Objects.deepEquals(this.audienceId, other.audienceId) &&
            Objects.deepEquals(this.audienceAcceleratorExclusionsEnabled, other.audienceAcceleratorExclusionsEnabled) &&
            Objects.deepEquals(this.audienceBoosterEnabled, other.audienceBoosterEnabled) &&
            Objects.deepEquals(this.audienceExcluderEnabled, other.audienceExcluderEnabled) &&
            Objects.deepEquals(this.audiencePredictorEnabled, other.audiencePredictorEnabled) &&
            Objects.deepEquals(this.crossDeviceVendorListForAudience, other.crossDeviceVendorListForAudience) &&
            Objects.deepEquals(this.recencyExclusionWindowInMinutes, other.recencyExclusionWindowInMinutes) &&
            Objects.deepEquals(this.targetTrackableUsersEnabled, other.targetTrackableUsersEnabled) &&
            Objects.deepEquals(this.useMcIdAsPrimary, other.useMcIdAsPrimary);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            audienceId,
            audienceAcceleratorExclusionsEnabled,
            audienceBoosterEnabled,
            audienceExcluderEnabled,
            audiencePredictorEnabled,
            crossDeviceVendorListForAudience,
            recencyExclusionWindowInMinutes,
            targetTrackableUsersEnabled,
            useMcIdAsPrimary);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdGroupAudienceTargeting.class,
                "audienceId", audienceId,
                "audienceAcceleratorExclusionsEnabled", audienceAcceleratorExclusionsEnabled,
                "audienceBoosterEnabled", audienceBoosterEnabled,
                "audienceExcluderEnabled", audienceExcluderEnabled,
                "audiencePredictorEnabled", audiencePredictorEnabled,
                "crossDeviceVendorListForAudience", crossDeviceVendorListForAudience,
                "recencyExclusionWindowInMinutes", recencyExclusionWindowInMinutes,
                "targetTrackableUsersEnabled", targetTrackableUsersEnabled,
                "useMcIdAsPrimary", useMcIdAsPrimary);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> audienceId = JsonNullable.undefined();
 
        private Boolean audienceAcceleratorExclusionsEnabled;
 
        private Boolean audienceBoosterEnabled;
 
        private Boolean audienceExcluderEnabled;
 
        private Boolean audiencePredictorEnabled;
 
        private Optional<? extends List<Integer>> crossDeviceVendorListForAudience = Optional.empty();
 
        private Integer recencyExclusionWindowInMinutes;
 
        private Boolean targetTrackableUsersEnabled;
 
        private Boolean useMcIdAsPrimary;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder audienceId(String audienceId) {
            Utils.checkNotNull(audienceId, "audienceId");
            this.audienceId = JsonNullable.of(audienceId);
            return this;
        }

        public Builder audienceId(JsonNullable<String> audienceId) {
            Utils.checkNotNull(audienceId, "audienceId");
            this.audienceId = audienceId;
            return this;
        }

        public Builder audienceAcceleratorExclusionsEnabled(boolean audienceAcceleratorExclusionsEnabled) {
            Utils.checkNotNull(audienceAcceleratorExclusionsEnabled, "audienceAcceleratorExclusionsEnabled");
            this.audienceAcceleratorExclusionsEnabled = audienceAcceleratorExclusionsEnabled;
            return this;
        }

        public Builder audienceBoosterEnabled(boolean audienceBoosterEnabled) {
            Utils.checkNotNull(audienceBoosterEnabled, "audienceBoosterEnabled");
            this.audienceBoosterEnabled = audienceBoosterEnabled;
            return this;
        }

        public Builder audienceExcluderEnabled(boolean audienceExcluderEnabled) {
            Utils.checkNotNull(audienceExcluderEnabled, "audienceExcluderEnabled");
            this.audienceExcluderEnabled = audienceExcluderEnabled;
            return this;
        }

        public Builder audiencePredictorEnabled(boolean audiencePredictorEnabled) {
            Utils.checkNotNull(audiencePredictorEnabled, "audiencePredictorEnabled");
            this.audiencePredictorEnabled = audiencePredictorEnabled;
            return this;
        }

        public Builder crossDeviceVendorListForAudience(List<Integer> crossDeviceVendorListForAudience) {
            Utils.checkNotNull(crossDeviceVendorListForAudience, "crossDeviceVendorListForAudience");
            this.crossDeviceVendorListForAudience = Optional.ofNullable(crossDeviceVendorListForAudience);
            return this;
        }

        public Builder crossDeviceVendorListForAudience(Optional<? extends List<Integer>> crossDeviceVendorListForAudience) {
            Utils.checkNotNull(crossDeviceVendorListForAudience, "crossDeviceVendorListForAudience");
            this.crossDeviceVendorListForAudience = crossDeviceVendorListForAudience;
            return this;
        }

        public Builder recencyExclusionWindowInMinutes(int recencyExclusionWindowInMinutes) {
            Utils.checkNotNull(recencyExclusionWindowInMinutes, "recencyExclusionWindowInMinutes");
            this.recencyExclusionWindowInMinutes = recencyExclusionWindowInMinutes;
            return this;
        }

        public Builder targetTrackableUsersEnabled(boolean targetTrackableUsersEnabled) {
            Utils.checkNotNull(targetTrackableUsersEnabled, "targetTrackableUsersEnabled");
            this.targetTrackableUsersEnabled = targetTrackableUsersEnabled;
            return this;
        }

        public Builder useMcIdAsPrimary(boolean useMcIdAsPrimary) {
            Utils.checkNotNull(useMcIdAsPrimary, "useMcIdAsPrimary");
            this.useMcIdAsPrimary = useMcIdAsPrimary;
            return this;
        }
        
        public AdGroupAudienceTargeting build() {
            return new AdGroupAudienceTargeting(
                audienceId,
                audienceAcceleratorExclusionsEnabled,
                audienceBoosterEnabled,
                audienceExcluderEnabled,
                audiencePredictorEnabled,
                crossDeviceVendorListForAudience,
                recencyExclusionWindowInMinutes,
                targetTrackableUsersEnabled,
                useMcIdAsPrimary);
        }
    }
}
