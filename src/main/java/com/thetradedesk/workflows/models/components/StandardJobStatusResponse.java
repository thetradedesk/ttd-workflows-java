/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class StandardJobStatusResponse {
    /**
     * The ID of the job.
     */
    @JsonProperty("id")
    private long id;

    /**
     * The UTC data and time that the job completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedAtUtc")
    private JsonNullable<OffsetDateTime> completedAtUtc;

    /**
     * The job completion percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionPercentage")
    private JsonNullable<Double> completionPercentage;

    /**
     * The UTC date and time that the job was created.
     */
    @JsonProperty("createdAtUtc")
    private OffsetDateTime createdAtUtc;


    @JsonProperty("status")
    private WorkflowStatus status;

    /**
     * The URL from which the job result can be downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawResult")
    private JsonNullable<String> rawResult;

    /**
     * A list of errors encountered during workflow processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private JsonNullable<String> errors;

    @JsonCreator
    public StandardJobStatusResponse(
            @JsonProperty("id") long id,
            @JsonProperty("completedAtUtc") JsonNullable<OffsetDateTime> completedAtUtc,
            @JsonProperty("completionPercentage") JsonNullable<Double> completionPercentage,
            @JsonProperty("createdAtUtc") OffsetDateTime createdAtUtc,
            @JsonProperty("status") WorkflowStatus status,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("rawResult") JsonNullable<String> rawResult,
            @JsonProperty("errors") JsonNullable<String> errors) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        Utils.checkNotNull(createdAtUtc, "createdAtUtc");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(rawResult, "rawResult");
        Utils.checkNotNull(errors, "errors");
        this.id = id;
        this.completedAtUtc = completedAtUtc;
        this.completionPercentage = completionPercentage;
        this.createdAtUtc = createdAtUtc;
        this.status = status;
        this.url = url;
        this.rawResult = rawResult;
        this.errors = errors;
    }
    
    public StandardJobStatusResponse(
            long id,
            OffsetDateTime createdAtUtc,
            WorkflowStatus status) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(),
            createdAtUtc, status, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the job.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * The UTC data and time that the job completed.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> completedAtUtc() {
        return completedAtUtc;
    }

    /**
     * The job completion percentage.
     */
    @JsonIgnore
    public JsonNullable<Double> completionPercentage() {
        return completionPercentage;
    }

    /**
     * The UTC date and time that the job was created.
     */
    @JsonIgnore
    public OffsetDateTime createdAtUtc() {
        return createdAtUtc;
    }

    @JsonIgnore
    public WorkflowStatus status() {
        return status;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    @JsonIgnore
    public JsonNullable<String> rawResult() {
        return rawResult;
    }

    /**
     * A list of errors encountered during workflow processing.
     */
    @JsonIgnore
    public JsonNullable<String> errors() {
        return errors;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the job.
     */
    public StandardJobStatusResponse withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The UTC data and time that the job completed.
     */
    public StandardJobStatusResponse withCompletedAtUtc(OffsetDateTime completedAtUtc) {
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        this.completedAtUtc = JsonNullable.of(completedAtUtc);
        return this;
    }

    /**
     * The UTC data and time that the job completed.
     */
    public StandardJobStatusResponse withCompletedAtUtc(JsonNullable<OffsetDateTime> completedAtUtc) {
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        this.completedAtUtc = completedAtUtc;
        return this;
    }

    /**
     * The job completion percentage.
     */
    public StandardJobStatusResponse withCompletionPercentage(double completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = JsonNullable.of(completionPercentage);
        return this;
    }

    /**
     * The job completion percentage.
     */
    public StandardJobStatusResponse withCompletionPercentage(JsonNullable<Double> completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = completionPercentage;
        return this;
    }

    /**
     * The UTC date and time that the job was created.
     */
    public StandardJobStatusResponse withCreatedAtUtc(OffsetDateTime createdAtUtc) {
        Utils.checkNotNull(createdAtUtc, "createdAtUtc");
        this.createdAtUtc = createdAtUtc;
        return this;
    }

    public StandardJobStatusResponse withStatus(WorkflowStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    public StandardJobStatusResponse withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The URL from which the job result can be downloaded.
     */
    public StandardJobStatusResponse withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    public StandardJobStatusResponse withRawResult(String rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = JsonNullable.of(rawResult);
        return this;
    }

    /**
     * The raw job result if the response is less than or equal to 20MB in size.
     * If the job result is larger than 20MB, then null is returned.
     */
    public StandardJobStatusResponse withRawResult(JsonNullable<String> rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = rawResult;
        return this;
    }

    /**
     * A list of errors encountered during workflow processing.
     */
    public StandardJobStatusResponse withErrors(String errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = JsonNullable.of(errors);
        return this;
    }

    /**
     * A list of errors encountered during workflow processing.
     */
    public StandardJobStatusResponse withErrors(JsonNullable<String> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StandardJobStatusResponse other = (StandardJobStatusResponse) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.completedAtUtc, other.completedAtUtc) &&
            Utils.enhancedDeepEquals(this.completionPercentage, other.completionPercentage) &&
            Utils.enhancedDeepEquals(this.createdAtUtc, other.createdAtUtc) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.rawResult, other.rawResult) &&
            Utils.enhancedDeepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, completedAtUtc, completionPercentage,
            createdAtUtc, status, url,
            rawResult, errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StandardJobStatusResponse.class,
                "id", id,
                "completedAtUtc", completedAtUtc,
                "completionPercentage", completionPercentage,
                "createdAtUtc", createdAtUtc,
                "status", status,
                "url", url,
                "rawResult", rawResult,
                "errors", errors);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private JsonNullable<OffsetDateTime> completedAtUtc = JsonNullable.undefined();

        private JsonNullable<Double> completionPercentage = JsonNullable.undefined();

        private OffsetDateTime createdAtUtc;

        private WorkflowStatus status;

        private JsonNullable<String> url = JsonNullable.undefined();

        private JsonNullable<String> rawResult = JsonNullable.undefined();

        private JsonNullable<String> errors = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the job.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The UTC data and time that the job completed.
         */
        public Builder completedAtUtc(OffsetDateTime completedAtUtc) {
            Utils.checkNotNull(completedAtUtc, "completedAtUtc");
            this.completedAtUtc = JsonNullable.of(completedAtUtc);
            return this;
        }

        /**
         * The UTC data and time that the job completed.
         */
        public Builder completedAtUtc(JsonNullable<OffsetDateTime> completedAtUtc) {
            Utils.checkNotNull(completedAtUtc, "completedAtUtc");
            this.completedAtUtc = completedAtUtc;
            return this;
        }


        /**
         * The job completion percentage.
         */
        public Builder completionPercentage(double completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = JsonNullable.of(completionPercentage);
            return this;
        }

        /**
         * The job completion percentage.
         */
        public Builder completionPercentage(JsonNullable<Double> completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = completionPercentage;
            return this;
        }


        /**
         * The UTC date and time that the job was created.
         */
        public Builder createdAtUtc(OffsetDateTime createdAtUtc) {
            Utils.checkNotNull(createdAtUtc, "createdAtUtc");
            this.createdAtUtc = createdAtUtc;
            return this;
        }


        public Builder status(WorkflowStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The URL from which the job result can be downloaded.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The URL from which the job result can be downloaded.
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The raw job result if the response is less than or equal to 20MB in size.
         * If the job result is larger than 20MB, then null is returned.
         */
        public Builder rawResult(String rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = JsonNullable.of(rawResult);
            return this;
        }

        /**
         * The raw job result if the response is less than or equal to 20MB in size.
         * If the job result is larger than 20MB, then null is returned.
         */
        public Builder rawResult(JsonNullable<String> rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = rawResult;
            return this;
        }


        /**
         * A list of errors encountered during workflow processing.
         */
        public Builder errors(String errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = JsonNullable.of(errors);
            return this;
        }

        /**
         * A list of errors encountered during workflow processing.
         */
        public Builder errors(JsonNullable<String> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        public StandardJobStatusResponse build() {

            return new StandardJobStatusResponse(
                id, completedAtUtc, completionPercentage,
                createdAtUtc, status, url,
                rawResult, errors);
        }

    }
}
