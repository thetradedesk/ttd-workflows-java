/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * GraphQlQueryJobInput
 * 
 * <p>Required fields for executing a GraphQL query job
 */
public class GraphQlQueryJobInput {
    /**
     * The GraphQL query to execute
     */
    @JsonProperty("query")
    private String query;

    /**
     * Input class for providing a callback's url and any headers needed for the callback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackInput")
    private Optional<? extends GraphQlJobCallbackInput> callbackInput;

    @JsonCreator
    public GraphQlQueryJobInput(
            @JsonProperty("query") String query,
            @JsonProperty("callbackInput") Optional<? extends GraphQlJobCallbackInput> callbackInput) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.query = query;
        this.callbackInput = callbackInput;
    }
    
    public GraphQlQueryJobInput(
            String query) {
        this(query, Optional.empty());
    }

    /**
     * The GraphQL query to execute
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Input class for providing a callback's url and any headers needed for the callback.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GraphQlJobCallbackInput> callbackInput() {
        return (Optional<GraphQlJobCallbackInput>) callbackInput;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The GraphQL query to execute
     */
    public GraphQlQueryJobInput withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Input class for providing a callback's url and any headers needed for the callback.
     */
    public GraphQlQueryJobInput withCallbackInput(GraphQlJobCallbackInput callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = Optional.ofNullable(callbackInput);
        return this;
    }


    /**
     * Input class for providing a callback's url and any headers needed for the callback.
     */
    public GraphQlQueryJobInput withCallbackInput(Optional<? extends GraphQlJobCallbackInput> callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = callbackInput;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GraphQlQueryJobInput other = (GraphQlQueryJobInput) o;
        return 
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.callbackInput, other.callbackInput);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            query, callbackInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GraphQlQueryJobInput.class,
                "query", query,
                "callbackInput", callbackInput);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String query;

        private Optional<? extends GraphQlJobCallbackInput> callbackInput = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The GraphQL query to execute
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Input class for providing a callback's url and any headers needed for the callback.
         */
        public Builder callbackInput(GraphQlJobCallbackInput callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = Optional.ofNullable(callbackInput);
            return this;
        }

        /**
         * Input class for providing a callback's url and any headers needed for the callback.
         */
        public Builder callbackInput(Optional<? extends GraphQlJobCallbackInput> callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = callbackInput;
            return this;
        }

        public GraphQlQueryJobInput build() {

            return new GraphQlQueryJobInput(
                query, callbackInput);
        }

    }
}
