/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * FirstPartyDataInput
 * 
 * <p>Required fields for submitting a bulk job for first-party data.
 */
public class FirstPartyDataInput {

    /**
     * The advertiser ID to query for.
     */
    @JsonProperty("advertiserId")
    private String advertiserId;

    /**
     * The name to filter by in the query. This filter will be applied to the results for the advertiser.
     * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nameFilter")
    private JsonNullable<String> nameFilter;

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *     name
     *     id
     *     activeUniques {
     *        householdCount
     *        idsConnectedTvCount
     *        idsCount
     *        idsInAppCount
     *        idsWebCount
     *        personsCount
     *     }
     *  }
     * ```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryShape")
    private JsonNullable<String> queryShape;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackInput")
    private Optional<? extends WorkflowCallbackInput> callbackInput;

    @JsonCreator
    public FirstPartyDataInput(
            @JsonProperty("advertiserId") String advertiserId,
            @JsonProperty("nameFilter") JsonNullable<String> nameFilter,
            @JsonProperty("queryShape") JsonNullable<String> queryShape,
            @JsonProperty("callbackInput") Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(advertiserId, "advertiserId");
        Utils.checkNotNull(nameFilter, "nameFilter");
        Utils.checkNotNull(queryShape, "queryShape");
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.advertiserId = advertiserId;
        this.nameFilter = nameFilter;
        this.queryShape = queryShape;
        this.callbackInput = callbackInput;
    }
    
    public FirstPartyDataInput(
            String advertiserId) {
        this(advertiserId, JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The advertiser ID to query for.
     */
    @JsonIgnore
    public String advertiserId() {
        return advertiserId;
    }

    /**
     * The name to filter by in the query. This filter will be applied to the results for the advertiser.
     * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
     */
    @JsonIgnore
    public JsonNullable<String> nameFilter() {
        return nameFilter;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *     name
     *     id
     *     activeUniques {
     *        householdCount
     *        idsConnectedTvCount
     *        idsCount
     *        idsInAppCount
     *        idsWebCount
     *        personsCount
     *     }
     *  }
     * ```
     */
    @JsonIgnore
    public JsonNullable<String> queryShape() {
        return queryShape;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowCallbackInput> callbackInput() {
        return (Optional<WorkflowCallbackInput>) callbackInput;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The advertiser ID to query for.
     */
    public FirstPartyDataInput withAdvertiserId(String advertiserId) {
        Utils.checkNotNull(advertiserId, "advertiserId");
        this.advertiserId = advertiserId;
        return this;
    }

    /**
     * The name to filter by in the query. This filter will be applied to the results for the advertiser.
     * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
     */
    public FirstPartyDataInput withNameFilter(String nameFilter) {
        Utils.checkNotNull(nameFilter, "nameFilter");
        this.nameFilter = JsonNullable.of(nameFilter);
        return this;
    }

    /**
     * The name to filter by in the query. This filter will be applied to the results for the advertiser.
     * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
     */
    public FirstPartyDataInput withNameFilter(JsonNullable<String> nameFilter) {
        Utils.checkNotNull(nameFilter, "nameFilter");
        this.nameFilter = nameFilter;
        return this;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *     name
     *     id
     *     activeUniques {
     *        householdCount
     *        idsConnectedTvCount
     *        idsCount
     *        idsInAppCount
     *        idsWebCount
     *        personsCount
     *     }
     *  }
     * ```
     */
    public FirstPartyDataInput withQueryShape(String queryShape) {
        Utils.checkNotNull(queryShape, "queryShape");
        this.queryShape = JsonNullable.of(queryShape);
        return this;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *     name
     *     id
     *     activeUniques {
     *        householdCount
     *        idsConnectedTvCount
     *        idsCount
     *        idsInAppCount
     *        idsWebCount
     *        personsCount
     *     }
     *  }
     * ```
     */
    public FirstPartyDataInput withQueryShape(JsonNullable<String> queryShape) {
        Utils.checkNotNull(queryShape, "queryShape");
        this.queryShape = queryShape;
        return this;
    }

    public FirstPartyDataInput withCallbackInput(WorkflowCallbackInput callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = Optional.ofNullable(callbackInput);
        return this;
    }

    public FirstPartyDataInput withCallbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = callbackInput;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FirstPartyDataInput other = (FirstPartyDataInput) o;
        return 
            Objects.deepEquals(this.advertiserId, other.advertiserId) &&
            Objects.deepEquals(this.nameFilter, other.nameFilter) &&
            Objects.deepEquals(this.queryShape, other.queryShape) &&
            Objects.deepEquals(this.callbackInput, other.callbackInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            advertiserId,
            nameFilter,
            queryShape,
            callbackInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FirstPartyDataInput.class,
                "advertiserId", advertiserId,
                "nameFilter", nameFilter,
                "queryShape", queryShape,
                "callbackInput", callbackInput);
    }
    
    public final static class Builder {
 
        private String advertiserId;
 
        private JsonNullable<String> nameFilter = JsonNullable.undefined();
 
        private JsonNullable<String> queryShape = JsonNullable.undefined();
 
        private Optional<? extends WorkflowCallbackInput> callbackInput = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The advertiser ID to query for.
         */
        public Builder advertiserId(String advertiserId) {
            Utils.checkNotNull(advertiserId, "advertiserId");
            this.advertiserId = advertiserId;
            return this;
        }

        /**
         * The name to filter by in the query. This filter will be applied to the results for the advertiser.
         * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
         */
        public Builder nameFilter(String nameFilter) {
            Utils.checkNotNull(nameFilter, "nameFilter");
            this.nameFilter = JsonNullable.of(nameFilter);
            return this;
        }

        /**
         * The name to filter by in the query. This filter will be applied to the results for the advertiser.
         * If there are no nodes which match the filter, a response with empty nodes with no first-party data will be returned.
         */
        public Builder nameFilter(JsonNullable<String> nameFilter) {
            Utils.checkNotNull(nameFilter, "nameFilter");
            this.nameFilter = nameFilter;
            return this;
        }

        /**
         * The shape of the query with the fields being asked for, which is sent downstream.
         *  This determines what the response will look like.
         * 
         * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
         * 
         * <p> If this is not provided the default query shape will be used:
         * 
         * <p> ```graphql
         *  nodes {
         *     name
         *     id
         *     activeUniques {
         *        householdCount
         *        idsConnectedTvCount
         *        idsCount
         *        idsInAppCount
         *        idsWebCount
         *        personsCount
         *     }
         *  }
         * ```
         */
        public Builder queryShape(String queryShape) {
            Utils.checkNotNull(queryShape, "queryShape");
            this.queryShape = JsonNullable.of(queryShape);
            return this;
        }

        /**
         * The shape of the query with the fields being asked for, which is sent downstream.
         *  This determines what the response will look like.
         * 
         * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
         * 
         * <p> If this is not provided the default query shape will be used:
         * 
         * <p> ```graphql
         *  nodes {
         *     name
         *     id
         *     activeUniques {
         *        householdCount
         *        idsConnectedTvCount
         *        idsCount
         *        idsInAppCount
         *        idsWebCount
         *        personsCount
         *     }
         *  }
         * ```
         */
        public Builder queryShape(JsonNullable<String> queryShape) {
            Utils.checkNotNull(queryShape, "queryShape");
            this.queryShape = queryShape;
            return this;
        }

        public Builder callbackInput(WorkflowCallbackInput callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = Optional.ofNullable(callbackInput);
            return this;
        }

        public Builder callbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = callbackInput;
            return this;
        }
        
        public FirstPartyDataInput build() {
            return new FirstPartyDataInput(
                advertiserId,
                nameFilter,
                queryShape,
                callbackInput);
        }
    }
}
