/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class UserError {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("field")
    private Optional<? extends List<String>> field;

    @JsonCreator
    public UserError(
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("field") Optional<? extends List<String>> field) {
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(field, "field");
        this.message = message;
        this.field = field;
    }
    
    public UserError() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> field() {
        return (Optional<List<String>>) field;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UserError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    public UserError withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public UserError withField(List<String> field) {
        Utils.checkNotNull(field, "field");
        this.field = Optional.ofNullable(field);
        return this;
    }

    public UserError withField(Optional<? extends List<String>> field) {
        Utils.checkNotNull(field, "field");
        this.field = field;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserError other = (UserError) o;
        return 
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.field, other.field);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            message,
            field);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserError.class,
                "message", message,
                "field", field);
    }
    
    public final static class Builder {
 
        private Optional<String> message = Optional.empty();
 
        private Optional<? extends List<String>> field = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder field(List<String> field) {
            Utils.checkNotNull(field, "field");
            this.field = Optional.ofNullable(field);
            return this;
        }

        public Builder field(Optional<? extends List<String>> field) {
            Utils.checkNotNull(field, "field");
            this.field = field;
            return this;
        }
        
        public UserError build() {
            return new UserError(
                message,
                field);
        }
    }
}
