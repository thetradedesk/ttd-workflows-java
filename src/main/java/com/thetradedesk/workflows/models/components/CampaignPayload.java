/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CampaignPayload {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaign")
    private Optional<? extends CampaignWorkflow> campaign;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adGroups")
    private JsonNullable<? extends List<AdGroupWorkflow>> adGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userErrors")
    private JsonNullable<? extends List<UserError>> userErrors;

    @JsonCreator
    public CampaignPayload(
            @JsonProperty("campaign") Optional<? extends CampaignWorkflow> campaign,
            @JsonProperty("adGroups") JsonNullable<? extends List<AdGroupWorkflow>> adGroups,
            @JsonProperty("userErrors") JsonNullable<? extends List<UserError>> userErrors) {
        Utils.checkNotNull(campaign, "campaign");
        Utils.checkNotNull(adGroups, "adGroups");
        Utils.checkNotNull(userErrors, "userErrors");
        this.campaign = campaign;
        this.adGroups = adGroups;
        this.userErrors = userErrors;
    }
    
    public CampaignPayload() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CampaignWorkflow> campaign() {
        return (Optional<CampaignWorkflow>) campaign;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<AdGroupWorkflow>> adGroups() {
        return (JsonNullable<List<AdGroupWorkflow>>) adGroups;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<UserError>> userErrors() {
        return (JsonNullable<List<UserError>>) userErrors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CampaignPayload withCampaign(CampaignWorkflow campaign) {
        Utils.checkNotNull(campaign, "campaign");
        this.campaign = Optional.ofNullable(campaign);
        return this;
    }

    public CampaignPayload withCampaign(Optional<? extends CampaignWorkflow> campaign) {
        Utils.checkNotNull(campaign, "campaign");
        this.campaign = campaign;
        return this;
    }

    public CampaignPayload withAdGroups(List<AdGroupWorkflow> adGroups) {
        Utils.checkNotNull(adGroups, "adGroups");
        this.adGroups = JsonNullable.of(adGroups);
        return this;
    }

    public CampaignPayload withAdGroups(JsonNullable<? extends List<AdGroupWorkflow>> adGroups) {
        Utils.checkNotNull(adGroups, "adGroups");
        this.adGroups = adGroups;
        return this;
    }

    public CampaignPayload withUserErrors(List<UserError> userErrors) {
        Utils.checkNotNull(userErrors, "userErrors");
        this.userErrors = JsonNullable.of(userErrors);
        return this;
    }

    public CampaignPayload withUserErrors(JsonNullable<? extends List<UserError>> userErrors) {
        Utils.checkNotNull(userErrors, "userErrors");
        this.userErrors = userErrors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CampaignPayload other = (CampaignPayload) o;
        return 
            Objects.deepEquals(this.campaign, other.campaign) &&
            Objects.deepEquals(this.adGroups, other.adGroups) &&
            Objects.deepEquals(this.userErrors, other.userErrors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            campaign,
            adGroups,
            userErrors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CampaignPayload.class,
                "campaign", campaign,
                "adGroups", adGroups,
                "userErrors", userErrors);
    }
    
    public final static class Builder {
 
        private Optional<? extends CampaignWorkflow> campaign = Optional.empty();
 
        private JsonNullable<? extends List<AdGroupWorkflow>> adGroups = JsonNullable.undefined();
 
        private JsonNullable<? extends List<UserError>> userErrors = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder campaign(CampaignWorkflow campaign) {
            Utils.checkNotNull(campaign, "campaign");
            this.campaign = Optional.ofNullable(campaign);
            return this;
        }

        public Builder campaign(Optional<? extends CampaignWorkflow> campaign) {
            Utils.checkNotNull(campaign, "campaign");
            this.campaign = campaign;
            return this;
        }

        public Builder adGroups(List<AdGroupWorkflow> adGroups) {
            Utils.checkNotNull(adGroups, "adGroups");
            this.adGroups = JsonNullable.of(adGroups);
            return this;
        }

        public Builder adGroups(JsonNullable<? extends List<AdGroupWorkflow>> adGroups) {
            Utils.checkNotNull(adGroups, "adGroups");
            this.adGroups = adGroups;
            return this;
        }

        public Builder userErrors(List<UserError> userErrors) {
            Utils.checkNotNull(userErrors, "userErrors");
            this.userErrors = JsonNullable.of(userErrors);
            return this;
        }

        public Builder userErrors(JsonNullable<? extends List<UserError>> userErrors) {
            Utils.checkNotNull(userErrors, "userErrors");
            this.userErrors = userErrors;
            return this;
        }
        
        public CampaignPayload build() {
            return new CampaignPayload(
                campaign,
                adGroups,
                userErrors);
        }
    }
}
