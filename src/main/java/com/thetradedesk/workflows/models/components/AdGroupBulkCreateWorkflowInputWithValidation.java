/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class AdGroupBulkCreateWorkflowInputWithValidation {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("input")
    private Optional<? extends List<AdGroupCreateWorkflowInput>> input;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validateInputOnly")
    private JsonNullable<Boolean> validateInputOnly;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackInput")
    private Optional<? extends WorkflowCallbackInput> callbackInput;

    @JsonCreator
    public AdGroupBulkCreateWorkflowInputWithValidation(
            @JsonProperty("input") Optional<? extends List<AdGroupCreateWorkflowInput>> input,
            @JsonProperty("validateInputOnly") JsonNullable<Boolean> validateInputOnly,
            @JsonProperty("callbackInput") Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(input, "input");
        Utils.checkNotNull(validateInputOnly, "validateInputOnly");
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.input = input;
        this.validateInputOnly = validateInputOnly;
        this.callbackInput = callbackInput;
    }
    
    public AdGroupBulkCreateWorkflowInputWithValidation() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AdGroupCreateWorkflowInput>> input() {
        return (Optional<List<AdGroupCreateWorkflowInput>>) input;
    }

    @JsonIgnore
    public JsonNullable<Boolean> validateInputOnly() {
        return validateInputOnly;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowCallbackInput> callbackInput() {
        return (Optional<WorkflowCallbackInput>) callbackInput;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AdGroupBulkCreateWorkflowInputWithValidation withInput(List<AdGroupCreateWorkflowInput> input) {
        Utils.checkNotNull(input, "input");
        this.input = Optional.ofNullable(input);
        return this;
    }

    public AdGroupBulkCreateWorkflowInputWithValidation withInput(Optional<? extends List<AdGroupCreateWorkflowInput>> input) {
        Utils.checkNotNull(input, "input");
        this.input = input;
        return this;
    }

    public AdGroupBulkCreateWorkflowInputWithValidation withValidateInputOnly(boolean validateInputOnly) {
        Utils.checkNotNull(validateInputOnly, "validateInputOnly");
        this.validateInputOnly = JsonNullable.of(validateInputOnly);
        return this;
    }

    public AdGroupBulkCreateWorkflowInputWithValidation withValidateInputOnly(JsonNullable<Boolean> validateInputOnly) {
        Utils.checkNotNull(validateInputOnly, "validateInputOnly");
        this.validateInputOnly = validateInputOnly;
        return this;
    }

    public AdGroupBulkCreateWorkflowInputWithValidation withCallbackInput(WorkflowCallbackInput callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = Optional.ofNullable(callbackInput);
        return this;
    }

    public AdGroupBulkCreateWorkflowInputWithValidation withCallbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = callbackInput;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdGroupBulkCreateWorkflowInputWithValidation other = (AdGroupBulkCreateWorkflowInputWithValidation) o;
        return 
            Objects.deepEquals(this.input, other.input) &&
            Objects.deepEquals(this.validateInputOnly, other.validateInputOnly) &&
            Objects.deepEquals(this.callbackInput, other.callbackInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            input,
            validateInputOnly,
            callbackInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdGroupBulkCreateWorkflowInputWithValidation.class,
                "input", input,
                "validateInputOnly", validateInputOnly,
                "callbackInput", callbackInput);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AdGroupCreateWorkflowInput>> input = Optional.empty();
 
        private JsonNullable<Boolean> validateInputOnly = JsonNullable.undefined();
 
        private Optional<? extends WorkflowCallbackInput> callbackInput = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder input(List<AdGroupCreateWorkflowInput> input) {
            Utils.checkNotNull(input, "input");
            this.input = Optional.ofNullable(input);
            return this;
        }

        public Builder input(Optional<? extends List<AdGroupCreateWorkflowInput>> input) {
            Utils.checkNotNull(input, "input");
            this.input = input;
            return this;
        }

        public Builder validateInputOnly(boolean validateInputOnly) {
            Utils.checkNotNull(validateInputOnly, "validateInputOnly");
            this.validateInputOnly = JsonNullable.of(validateInputOnly);
            return this;
        }

        public Builder validateInputOnly(JsonNullable<Boolean> validateInputOnly) {
            Utils.checkNotNull(validateInputOnly, "validateInputOnly");
            this.validateInputOnly = validateInputOnly;
            return this;
        }

        public Builder callbackInput(WorkflowCallbackInput callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = Optional.ofNullable(callbackInput);
            return this;
        }

        public Builder callbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = callbackInput;
            return this;
        }
        
        public AdGroupBulkCreateWorkflowInputWithValidation build() {
            return new AdGroupBulkCreateWorkflowInputWithValidation(
                input,
                validateInputOnly,
                callbackInput);
        }
    }
}
