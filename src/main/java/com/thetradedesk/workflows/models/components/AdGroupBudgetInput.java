/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class AdGroupBudgetInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocationType")
    private Optional<? extends AllocationType> allocationType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budgetInAdvertiserCurrency")
    private JsonNullable<Double> budgetInAdvertiserCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budgetInImpressions")
    private JsonNullable<Long> budgetInImpressions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dailyTargetInAdvertiserCurrency")
    private JsonNullable<Double> dailyTargetInAdvertiserCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dailyTargetInImpressions")
    private JsonNullable<Long> dailyTargetInImpressions;

    @JsonCreator
    public AdGroupBudgetInput(
            @JsonProperty("allocationType") Optional<? extends AllocationType> allocationType,
            @JsonProperty("budgetInAdvertiserCurrency") JsonNullable<Double> budgetInAdvertiserCurrency,
            @JsonProperty("budgetInImpressions") JsonNullable<Long> budgetInImpressions,
            @JsonProperty("dailyTargetInAdvertiserCurrency") JsonNullable<Double> dailyTargetInAdvertiserCurrency,
            @JsonProperty("dailyTargetInImpressions") JsonNullable<Long> dailyTargetInImpressions) {
        Utils.checkNotNull(allocationType, "allocationType");
        Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.allocationType = allocationType;
        this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
        this.budgetInImpressions = budgetInImpressions;
        this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
        this.dailyTargetInImpressions = dailyTargetInImpressions;
    }
    
    public AdGroupBudgetInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AllocationType> allocationType() {
        return (Optional<AllocationType>) allocationType;
    }

    @JsonIgnore
    public JsonNullable<Double> budgetInAdvertiserCurrency() {
        return budgetInAdvertiserCurrency;
    }

    @JsonIgnore
    public JsonNullable<Long> budgetInImpressions() {
        return budgetInImpressions;
    }

    @JsonIgnore
    public JsonNullable<Double> dailyTargetInAdvertiserCurrency() {
        return dailyTargetInAdvertiserCurrency;
    }

    @JsonIgnore
    public JsonNullable<Long> dailyTargetInImpressions() {
        return dailyTargetInImpressions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AdGroupBudgetInput withAllocationType(AllocationType allocationType) {
        Utils.checkNotNull(allocationType, "allocationType");
        this.allocationType = Optional.ofNullable(allocationType);
        return this;
    }

    public AdGroupBudgetInput withAllocationType(Optional<? extends AllocationType> allocationType) {
        Utils.checkNotNull(allocationType, "allocationType");
        this.allocationType = allocationType;
        return this;
    }

    public AdGroupBudgetInput withBudgetInAdvertiserCurrency(double budgetInAdvertiserCurrency) {
        Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
        this.budgetInAdvertiserCurrency = JsonNullable.of(budgetInAdvertiserCurrency);
        return this;
    }

    public AdGroupBudgetInput withBudgetInAdvertiserCurrency(JsonNullable<Double> budgetInAdvertiserCurrency) {
        Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
        this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
        return this;
    }

    public AdGroupBudgetInput withBudgetInImpressions(long budgetInImpressions) {
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        this.budgetInImpressions = JsonNullable.of(budgetInImpressions);
        return this;
    }

    public AdGroupBudgetInput withBudgetInImpressions(JsonNullable<Long> budgetInImpressions) {
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        this.budgetInImpressions = budgetInImpressions;
        return this;
    }

    public AdGroupBudgetInput withDailyTargetInAdvertiserCurrency(double dailyTargetInAdvertiserCurrency) {
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        this.dailyTargetInAdvertiserCurrency = JsonNullable.of(dailyTargetInAdvertiserCurrency);
        return this;
    }

    public AdGroupBudgetInput withDailyTargetInAdvertiserCurrency(JsonNullable<Double> dailyTargetInAdvertiserCurrency) {
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
        return this;
    }

    public AdGroupBudgetInput withDailyTargetInImpressions(long dailyTargetInImpressions) {
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.dailyTargetInImpressions = JsonNullable.of(dailyTargetInImpressions);
        return this;
    }

    public AdGroupBudgetInput withDailyTargetInImpressions(JsonNullable<Long> dailyTargetInImpressions) {
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.dailyTargetInImpressions = dailyTargetInImpressions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdGroupBudgetInput other = (AdGroupBudgetInput) o;
        return 
            Objects.deepEquals(this.allocationType, other.allocationType) &&
            Objects.deepEquals(this.budgetInAdvertiserCurrency, other.budgetInAdvertiserCurrency) &&
            Objects.deepEquals(this.budgetInImpressions, other.budgetInImpressions) &&
            Objects.deepEquals(this.dailyTargetInAdvertiserCurrency, other.dailyTargetInAdvertiserCurrency) &&
            Objects.deepEquals(this.dailyTargetInImpressions, other.dailyTargetInImpressions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            allocationType,
            budgetInAdvertiserCurrency,
            budgetInImpressions,
            dailyTargetInAdvertiserCurrency,
            dailyTargetInImpressions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdGroupBudgetInput.class,
                "allocationType", allocationType,
                "budgetInAdvertiserCurrency", budgetInAdvertiserCurrency,
                "budgetInImpressions", budgetInImpressions,
                "dailyTargetInAdvertiserCurrency", dailyTargetInAdvertiserCurrency,
                "dailyTargetInImpressions", dailyTargetInImpressions);
    }
    
    public final static class Builder {
 
        private Optional<? extends AllocationType> allocationType = Optional.empty();
 
        private JsonNullable<Double> budgetInAdvertiserCurrency = JsonNullable.undefined();
 
        private JsonNullable<Long> budgetInImpressions = JsonNullable.undefined();
 
        private JsonNullable<Double> dailyTargetInAdvertiserCurrency = JsonNullable.undefined();
 
        private JsonNullable<Long> dailyTargetInImpressions = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allocationType(AllocationType allocationType) {
            Utils.checkNotNull(allocationType, "allocationType");
            this.allocationType = Optional.ofNullable(allocationType);
            return this;
        }

        public Builder allocationType(Optional<? extends AllocationType> allocationType) {
            Utils.checkNotNull(allocationType, "allocationType");
            this.allocationType = allocationType;
            return this;
        }

        public Builder budgetInAdvertiserCurrency(double budgetInAdvertiserCurrency) {
            Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
            this.budgetInAdvertiserCurrency = JsonNullable.of(budgetInAdvertiserCurrency);
            return this;
        }

        public Builder budgetInAdvertiserCurrency(JsonNullable<Double> budgetInAdvertiserCurrency) {
            Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
            this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
            return this;
        }

        public Builder budgetInImpressions(long budgetInImpressions) {
            Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
            this.budgetInImpressions = JsonNullable.of(budgetInImpressions);
            return this;
        }

        public Builder budgetInImpressions(JsonNullable<Long> budgetInImpressions) {
            Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
            this.budgetInImpressions = budgetInImpressions;
            return this;
        }

        public Builder dailyTargetInAdvertiserCurrency(double dailyTargetInAdvertiserCurrency) {
            Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
            this.dailyTargetInAdvertiserCurrency = JsonNullable.of(dailyTargetInAdvertiserCurrency);
            return this;
        }

        public Builder dailyTargetInAdvertiserCurrency(JsonNullable<Double> dailyTargetInAdvertiserCurrency) {
            Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
            this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
            return this;
        }

        public Builder dailyTargetInImpressions(long dailyTargetInImpressions) {
            Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
            this.dailyTargetInImpressions = JsonNullable.of(dailyTargetInImpressions);
            return this;
        }

        public Builder dailyTargetInImpressions(JsonNullable<Long> dailyTargetInImpressions) {
            Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
            this.dailyTargetInImpressions = dailyTargetInImpressions;
            return this;
        }
        
        public AdGroupBudgetInput build() {
            return new AdGroupBudgetInput(
                allocationType,
                budgetInAdvertiserCurrency,
                budgetInImpressions,
                dailyTargetInAdvertiserCurrency,
                dailyTargetInImpressions);
        }
    }
}
