/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * KeyValuePairOfStringAndStringInput
 * 
 * <p>Type that specifies the key value association of a callback header.
 */
public class KeyValuePairOfStringAndStringInput {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("key")
    private Optional<String> key;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("value")
    private Optional<String> value;

    @JsonCreator
    public KeyValuePairOfStringAndStringInput(
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("value") Optional<String> value) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(value, "value");
        this.key = key;
        this.value = value;
    }
    
    public KeyValuePairOfStringAndStringInput() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    public KeyValuePairOfStringAndStringInput withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }


    public KeyValuePairOfStringAndStringInput withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public KeyValuePairOfStringAndStringInput withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }


    public KeyValuePairOfStringAndStringInput withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KeyValuePairOfStringAndStringInput other = (KeyValuePairOfStringAndStringInput) o;
        return 
            Utils.enhancedDeepEquals(this.key, other.key) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            key, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KeyValuePairOfStringAndStringInput.class,
                "key", key,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> key = Optional.empty();

        private Optional<String> value = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }


        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public KeyValuePairOfStringAndStringInput build() {

            return new KeyValuePairOfStringAndStringInput(
                key, value);
        }

    }
}
