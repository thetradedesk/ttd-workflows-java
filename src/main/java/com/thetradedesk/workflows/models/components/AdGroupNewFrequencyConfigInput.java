/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class AdGroupNewFrequencyConfigInput {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("counterName")
    private Optional<String> counterName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequencyCap")
    private JsonNullable<Integer> frequencyCap;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequencyGoal")
    private JsonNullable<Integer> frequencyGoal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resetIntervalInMinutes")
    private Optional<Integer> resetIntervalInMinutes;

    @JsonCreator
    public AdGroupNewFrequencyConfigInput(
            @JsonProperty("counterName") Optional<String> counterName,
            @JsonProperty("frequencyCap") JsonNullable<Integer> frequencyCap,
            @JsonProperty("frequencyGoal") JsonNullable<Integer> frequencyGoal,
            @JsonProperty("resetIntervalInMinutes") Optional<Integer> resetIntervalInMinutes) {
        Utils.checkNotNull(counterName, "counterName");
        Utils.checkNotNull(frequencyCap, "frequencyCap");
        Utils.checkNotNull(frequencyGoal, "frequencyGoal");
        Utils.checkNotNull(resetIntervalInMinutes, "resetIntervalInMinutes");
        this.counterName = counterName;
        this.frequencyCap = frequencyCap;
        this.frequencyGoal = frequencyGoal;
        this.resetIntervalInMinutes = resetIntervalInMinutes;
    }
    
    public AdGroupNewFrequencyConfigInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> counterName() {
        return counterName;
    }

    @JsonIgnore
    public JsonNullable<Integer> frequencyCap() {
        return frequencyCap;
    }

    @JsonIgnore
    public JsonNullable<Integer> frequencyGoal() {
        return frequencyGoal;
    }

    @JsonIgnore
    public Optional<Integer> resetIntervalInMinutes() {
        return resetIntervalInMinutes;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AdGroupNewFrequencyConfigInput withCounterName(String counterName) {
        Utils.checkNotNull(counterName, "counterName");
        this.counterName = Optional.ofNullable(counterName);
        return this;
    }

    public AdGroupNewFrequencyConfigInput withCounterName(Optional<String> counterName) {
        Utils.checkNotNull(counterName, "counterName");
        this.counterName = counterName;
        return this;
    }

    public AdGroupNewFrequencyConfigInput withFrequencyCap(int frequencyCap) {
        Utils.checkNotNull(frequencyCap, "frequencyCap");
        this.frequencyCap = JsonNullable.of(frequencyCap);
        return this;
    }

    public AdGroupNewFrequencyConfigInput withFrequencyCap(JsonNullable<Integer> frequencyCap) {
        Utils.checkNotNull(frequencyCap, "frequencyCap");
        this.frequencyCap = frequencyCap;
        return this;
    }

    public AdGroupNewFrequencyConfigInput withFrequencyGoal(int frequencyGoal) {
        Utils.checkNotNull(frequencyGoal, "frequencyGoal");
        this.frequencyGoal = JsonNullable.of(frequencyGoal);
        return this;
    }

    public AdGroupNewFrequencyConfigInput withFrequencyGoal(JsonNullable<Integer> frequencyGoal) {
        Utils.checkNotNull(frequencyGoal, "frequencyGoal");
        this.frequencyGoal = frequencyGoal;
        return this;
    }

    public AdGroupNewFrequencyConfigInput withResetIntervalInMinutes(int resetIntervalInMinutes) {
        Utils.checkNotNull(resetIntervalInMinutes, "resetIntervalInMinutes");
        this.resetIntervalInMinutes = Optional.ofNullable(resetIntervalInMinutes);
        return this;
    }

    public AdGroupNewFrequencyConfigInput withResetIntervalInMinutes(Optional<Integer> resetIntervalInMinutes) {
        Utils.checkNotNull(resetIntervalInMinutes, "resetIntervalInMinutes");
        this.resetIntervalInMinutes = resetIntervalInMinutes;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdGroupNewFrequencyConfigInput other = (AdGroupNewFrequencyConfigInput) o;
        return 
            Objects.deepEquals(this.counterName, other.counterName) &&
            Objects.deepEquals(this.frequencyCap, other.frequencyCap) &&
            Objects.deepEquals(this.frequencyGoal, other.frequencyGoal) &&
            Objects.deepEquals(this.resetIntervalInMinutes, other.resetIntervalInMinutes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            counterName,
            frequencyCap,
            frequencyGoal,
            resetIntervalInMinutes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdGroupNewFrequencyConfigInput.class,
                "counterName", counterName,
                "frequencyCap", frequencyCap,
                "frequencyGoal", frequencyGoal,
                "resetIntervalInMinutes", resetIntervalInMinutes);
    }
    
    public final static class Builder {
 
        private Optional<String> counterName = Optional.empty();
 
        private JsonNullable<Integer> frequencyCap = JsonNullable.undefined();
 
        private JsonNullable<Integer> frequencyGoal = JsonNullable.undefined();
 
        private Optional<Integer> resetIntervalInMinutes = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder counterName(String counterName) {
            Utils.checkNotNull(counterName, "counterName");
            this.counterName = Optional.ofNullable(counterName);
            return this;
        }

        public Builder counterName(Optional<String> counterName) {
            Utils.checkNotNull(counterName, "counterName");
            this.counterName = counterName;
            return this;
        }

        public Builder frequencyCap(int frequencyCap) {
            Utils.checkNotNull(frequencyCap, "frequencyCap");
            this.frequencyCap = JsonNullable.of(frequencyCap);
            return this;
        }

        public Builder frequencyCap(JsonNullable<Integer> frequencyCap) {
            Utils.checkNotNull(frequencyCap, "frequencyCap");
            this.frequencyCap = frequencyCap;
            return this;
        }

        public Builder frequencyGoal(int frequencyGoal) {
            Utils.checkNotNull(frequencyGoal, "frequencyGoal");
            this.frequencyGoal = JsonNullable.of(frequencyGoal);
            return this;
        }

        public Builder frequencyGoal(JsonNullable<Integer> frequencyGoal) {
            Utils.checkNotNull(frequencyGoal, "frequencyGoal");
            this.frequencyGoal = frequencyGoal;
            return this;
        }

        public Builder resetIntervalInMinutes(int resetIntervalInMinutes) {
            Utils.checkNotNull(resetIntervalInMinutes, "resetIntervalInMinutes");
            this.resetIntervalInMinutes = Optional.ofNullable(resetIntervalInMinutes);
            return this;
        }

        public Builder resetIntervalInMinutes(Optional<Integer> resetIntervalInMinutes) {
            Utils.checkNotNull(resetIntervalInMinutes, "resetIntervalInMinutes");
            this.resetIntervalInMinutes = resetIntervalInMinutes;
            return this;
        }
        
        public AdGroupNewFrequencyConfigInput build() {
            return new AdGroupNewFrequencyConfigInput(
                counterName,
                frequencyCap,
                frequencyGoal,
                resetIntervalInMinutes);
        }
    }
}
