/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class BulkJobStatusResponse {

    /**
     * ID of the bulk job.
     */
    @JsonProperty("id")
    private long id;

    /**
     * Time of completion for this bulk job in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedAtUtc")
    private JsonNullable<OffsetDateTime> completedAtUtc;

    /**
     * Completion percentage for that bulk job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionPercentage")
    private JsonNullable<Double> completionPercentage;

    /**
     * Time of creation for that bulk job in UTC.
     */
    @JsonProperty("createdAtUtc")
    private OffsetDateTime createdAtUtc;

    @JsonProperty("status")
    private WorkflowStatus status;

    /**
     * The url where the result can be picked up
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
     * than this threshold, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawResult")
    private JsonNullable<String> rawResult;

    /**
     * Any errors encountered during workflow processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private JsonNullable<String> errors;

    @JsonCreator
    public BulkJobStatusResponse(
            @JsonProperty("id") long id,
            @JsonProperty("completedAtUtc") JsonNullable<OffsetDateTime> completedAtUtc,
            @JsonProperty("completionPercentage") JsonNullable<Double> completionPercentage,
            @JsonProperty("createdAtUtc") OffsetDateTime createdAtUtc,
            @JsonProperty("status") WorkflowStatus status,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("rawResult") JsonNullable<String> rawResult,
            @JsonProperty("errors") JsonNullable<String> errors) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        Utils.checkNotNull(createdAtUtc, "createdAtUtc");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(rawResult, "rawResult");
        Utils.checkNotNull(errors, "errors");
        this.id = id;
        this.completedAtUtc = completedAtUtc;
        this.completionPercentage = completionPercentage;
        this.createdAtUtc = createdAtUtc;
        this.status = status;
        this.url = url;
        this.rawResult = rawResult;
        this.errors = errors;
    }
    
    public BulkJobStatusResponse(
            long id,
            OffsetDateTime createdAtUtc,
            WorkflowStatus status) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), createdAtUtc, status, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * ID of the bulk job.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * Time of completion for this bulk job in UTC.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> completedAtUtc() {
        return completedAtUtc;
    }

    /**
     * Completion percentage for that bulk job.
     */
    @JsonIgnore
    public JsonNullable<Double> completionPercentage() {
        return completionPercentage;
    }

    /**
     * Time of creation for that bulk job in UTC.
     */
    @JsonIgnore
    public OffsetDateTime createdAtUtc() {
        return createdAtUtc;
    }

    @JsonIgnore
    public WorkflowStatus status() {
        return status;
    }

    /**
     * The url where the result can be picked up
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
     * than this threshold, then null is returned.
     */
    @JsonIgnore
    public JsonNullable<String> rawResult() {
        return rawResult;
    }

    /**
     * Any errors encountered during workflow processing
     */
    @JsonIgnore
    public JsonNullable<String> errors() {
        return errors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * ID of the bulk job.
     */
    public BulkJobStatusResponse withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Time of completion for this bulk job in UTC.
     */
    public BulkJobStatusResponse withCompletedAtUtc(OffsetDateTime completedAtUtc) {
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        this.completedAtUtc = JsonNullable.of(completedAtUtc);
        return this;
    }

    /**
     * Time of completion for this bulk job in UTC.
     */
    public BulkJobStatusResponse withCompletedAtUtc(JsonNullable<OffsetDateTime> completedAtUtc) {
        Utils.checkNotNull(completedAtUtc, "completedAtUtc");
        this.completedAtUtc = completedAtUtc;
        return this;
    }

    /**
     * Completion percentage for that bulk job.
     */
    public BulkJobStatusResponse withCompletionPercentage(double completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = JsonNullable.of(completionPercentage);
        return this;
    }

    /**
     * Completion percentage for that bulk job.
     */
    public BulkJobStatusResponse withCompletionPercentage(JsonNullable<Double> completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = completionPercentage;
        return this;
    }

    /**
     * Time of creation for that bulk job in UTC.
     */
    public BulkJobStatusResponse withCreatedAtUtc(OffsetDateTime createdAtUtc) {
        Utils.checkNotNull(createdAtUtc, "createdAtUtc");
        this.createdAtUtc = createdAtUtc;
        return this;
    }

    public BulkJobStatusResponse withStatus(WorkflowStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The url where the result can be picked up
     */
    public BulkJobStatusResponse withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The url where the result can be picked up
     */
    public BulkJobStatusResponse withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
     * than this threshold, then null is returned.
     */
    public BulkJobStatusResponse withRawResult(String rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = JsonNullable.of(rawResult);
        return this;
    }

    /**
     * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
     * than this threshold, then null is returned.
     */
    public BulkJobStatusResponse withRawResult(JsonNullable<String> rawResult) {
        Utils.checkNotNull(rawResult, "rawResult");
        this.rawResult = rawResult;
        return this;
    }

    /**
     * Any errors encountered during workflow processing
     */
    public BulkJobStatusResponse withErrors(String errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = JsonNullable.of(errors);
        return this;
    }

    /**
     * Any errors encountered during workflow processing
     */
    public BulkJobStatusResponse withErrors(JsonNullable<String> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkJobStatusResponse other = (BulkJobStatusResponse) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.completedAtUtc, other.completedAtUtc) &&
            Objects.deepEquals(this.completionPercentage, other.completionPercentage) &&
            Objects.deepEquals(this.createdAtUtc, other.createdAtUtc) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.rawResult, other.rawResult) &&
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            completedAtUtc,
            completionPercentage,
            createdAtUtc,
            status,
            url,
            rawResult,
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkJobStatusResponse.class,
                "id", id,
                "completedAtUtc", completedAtUtc,
                "completionPercentage", completionPercentage,
                "createdAtUtc", createdAtUtc,
                "status", status,
                "url", url,
                "rawResult", rawResult,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private JsonNullable<OffsetDateTime> completedAtUtc = JsonNullable.undefined();
 
        private JsonNullable<Double> completionPercentage = JsonNullable.undefined();
 
        private OffsetDateTime createdAtUtc;
 
        private WorkflowStatus status;
 
        private JsonNullable<String> url = JsonNullable.undefined();
 
        private JsonNullable<String> rawResult = JsonNullable.undefined();
 
        private JsonNullable<String> errors = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the bulk job.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Time of completion for this bulk job in UTC.
         */
        public Builder completedAtUtc(OffsetDateTime completedAtUtc) {
            Utils.checkNotNull(completedAtUtc, "completedAtUtc");
            this.completedAtUtc = JsonNullable.of(completedAtUtc);
            return this;
        }

        /**
         * Time of completion for this bulk job in UTC.
         */
        public Builder completedAtUtc(JsonNullable<OffsetDateTime> completedAtUtc) {
            Utils.checkNotNull(completedAtUtc, "completedAtUtc");
            this.completedAtUtc = completedAtUtc;
            return this;
        }

        /**
         * Completion percentage for that bulk job.
         */
        public Builder completionPercentage(double completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = JsonNullable.of(completionPercentage);
            return this;
        }

        /**
         * Completion percentage for that bulk job.
         */
        public Builder completionPercentage(JsonNullable<Double> completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = completionPercentage;
            return this;
        }

        /**
         * Time of creation for that bulk job in UTC.
         */
        public Builder createdAtUtc(OffsetDateTime createdAtUtc) {
            Utils.checkNotNull(createdAtUtc, "createdAtUtc");
            this.createdAtUtc = createdAtUtc;
            return this;
        }

        public Builder status(WorkflowStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The url where the result can be picked up
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The url where the result can be picked up
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
         * than this threshold, then null is returned.
         */
        public Builder rawResult(String rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = JsonNullable.of(rawResult);
            return this;
        }

        /**
         * The raw result if the response is less than 5MB in size. If the result is too large and size is larger
         * than this threshold, then null is returned.
         */
        public Builder rawResult(JsonNullable<String> rawResult) {
            Utils.checkNotNull(rawResult, "rawResult");
            this.rawResult = rawResult;
            return this;
        }

        /**
         * Any errors encountered during workflow processing
         */
        public Builder errors(String errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = JsonNullable.of(errors);
            return this;
        }

        /**
         * Any errors encountered during workflow processing
         */
        public Builder errors(JsonNullable<String> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public BulkJobStatusResponse build() {
            return new BulkJobStatusResponse(
                id,
                completedAtUtc,
                completionPercentage,
                createdAtUtc,
                status,
                url,
                rawResult,
                errors);
        }
    }
}
