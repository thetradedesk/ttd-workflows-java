/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ThirdPartyDataInput
 * 
 * <p>Required fields for submitting a bulk job for third-party data.
 */
public class ThirdPartyDataInput {

    /**
     * The partner ID to query for.
     */
    @JsonProperty("partnerId")
    private String partnerId;

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *      id
     *      name
     *      providerId
     *      providerElementId
     *      description
     *      buyable
     *      fullPath
     *      activeUniques {
     *          householdCount
     *          idsConnectedTvCount
     *          idsInAppCount
     *          idsWebCount
     *          personsCount
     *          thirdPartyDataOverlapCount
     *          lastUpdated
     *      }
     *  }
     * ```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryShape")
    private JsonNullable<String> queryShape;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackInput")
    private Optional<? extends WorkflowCallbackInput> callbackInput;

    @JsonCreator
    public ThirdPartyDataInput(
            @JsonProperty("partnerId") String partnerId,
            @JsonProperty("queryShape") JsonNullable<String> queryShape,
            @JsonProperty("callbackInput") Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(partnerId, "partnerId");
        Utils.checkNotNull(queryShape, "queryShape");
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.partnerId = partnerId;
        this.queryShape = queryShape;
        this.callbackInput = callbackInput;
    }
    
    public ThirdPartyDataInput(
            String partnerId) {
        this(partnerId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The partner ID to query for.
     */
    @JsonIgnore
    public String partnerId() {
        return partnerId;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *      id
     *      name
     *      providerId
     *      providerElementId
     *      description
     *      buyable
     *      fullPath
     *      activeUniques {
     *          householdCount
     *          idsConnectedTvCount
     *          idsInAppCount
     *          idsWebCount
     *          personsCount
     *          thirdPartyDataOverlapCount
     *          lastUpdated
     *      }
     *  }
     * ```
     */
    @JsonIgnore
    public JsonNullable<String> queryShape() {
        return queryShape;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowCallbackInput> callbackInput() {
        return (Optional<WorkflowCallbackInput>) callbackInput;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The partner ID to query for.
     */
    public ThirdPartyDataInput withPartnerId(String partnerId) {
        Utils.checkNotNull(partnerId, "partnerId");
        this.partnerId = partnerId;
        return this;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *      id
     *      name
     *      providerId
     *      providerElementId
     *      description
     *      buyable
     *      fullPath
     *      activeUniques {
     *          householdCount
     *          idsConnectedTvCount
     *          idsInAppCount
     *          idsWebCount
     *          personsCount
     *          thirdPartyDataOverlapCount
     *          lastUpdated
     *      }
     *  }
     * ```
     */
    public ThirdPartyDataInput withQueryShape(String queryShape) {
        Utils.checkNotNull(queryShape, "queryShape");
        this.queryShape = JsonNullable.of(queryShape);
        return this;
    }

    /**
     * The shape of the query with the fields being asked for, which is sent downstream.
     *  This determines what the response will look like.
     * 
     * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
     * 
     * <p> If this is not provided the default query shape will be used:
     * 
     * <p> ```graphql
     *  nodes {
     *      id
     *      name
     *      providerId
     *      providerElementId
     *      description
     *      buyable
     *      fullPath
     *      activeUniques {
     *          householdCount
     *          idsConnectedTvCount
     *          idsInAppCount
     *          idsWebCount
     *          personsCount
     *          thirdPartyDataOverlapCount
     *          lastUpdated
     *      }
     *  }
     * ```
     */
    public ThirdPartyDataInput withQueryShape(JsonNullable<String> queryShape) {
        Utils.checkNotNull(queryShape, "queryShape");
        this.queryShape = queryShape;
        return this;
    }

    public ThirdPartyDataInput withCallbackInput(WorkflowCallbackInput callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = Optional.ofNullable(callbackInput);
        return this;
    }

    public ThirdPartyDataInput withCallbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
        Utils.checkNotNull(callbackInput, "callbackInput");
        this.callbackInput = callbackInput;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThirdPartyDataInput other = (ThirdPartyDataInput) o;
        return 
            Objects.deepEquals(this.partnerId, other.partnerId) &&
            Objects.deepEquals(this.queryShape, other.queryShape) &&
            Objects.deepEquals(this.callbackInput, other.callbackInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            partnerId,
            queryShape,
            callbackInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ThirdPartyDataInput.class,
                "partnerId", partnerId,
                "queryShape", queryShape,
                "callbackInput", callbackInput);
    }
    
    public final static class Builder {
 
        private String partnerId;
 
        private JsonNullable<String> queryShape = JsonNullable.undefined();
 
        private Optional<? extends WorkflowCallbackInput> callbackInput = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The partner ID to query for.
         */
        public Builder partnerId(String partnerId) {
            Utils.checkNotNull(partnerId, "partnerId");
            this.partnerId = partnerId;
            return this;
        }

        /**
         * The shape of the query with the fields being asked for, which is sent downstream.
         *  This determines what the response will look like.
         * 
         * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
         * 
         * <p> If this is not provided the default query shape will be used:
         * 
         * <p> ```graphql
         *  nodes {
         *      id
         *      name
         *      providerId
         *      providerElementId
         *      description
         *      buyable
         *      fullPath
         *      activeUniques {
         *          householdCount
         *          idsConnectedTvCount
         *          idsInAppCount
         *          idsWebCount
         *          personsCount
         *          thirdPartyDataOverlapCount
         *          lastUpdated
         *      }
         *  }
         * ```
         */
        public Builder queryShape(String queryShape) {
            Utils.checkNotNull(queryShape, "queryShape");
            this.queryShape = JsonNullable.of(queryShape);
            return this;
        }

        /**
         * The shape of the query with the fields being asked for, which is sent downstream.
         *  This determines what the response will look like.
         * 
         * <p> For example, a query shape equal to `"nodes {id name}"` will return the `id` and `name` fields only.
         * 
         * <p> If this is not provided the default query shape will be used:
         * 
         * <p> ```graphql
         *  nodes {
         *      id
         *      name
         *      providerId
         *      providerElementId
         *      description
         *      buyable
         *      fullPath
         *      activeUniques {
         *          householdCount
         *          idsConnectedTvCount
         *          idsInAppCount
         *          idsWebCount
         *          personsCount
         *          thirdPartyDataOverlapCount
         *          lastUpdated
         *      }
         *  }
         * ```
         */
        public Builder queryShape(JsonNullable<String> queryShape) {
            Utils.checkNotNull(queryShape, "queryShape");
            this.queryShape = queryShape;
            return this;
        }

        public Builder callbackInput(WorkflowCallbackInput callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = Optional.ofNullable(callbackInput);
            return this;
        }

        public Builder callbackInput(Optional<? extends WorkflowCallbackInput> callbackInput) {
            Utils.checkNotNull(callbackInput, "callbackInput");
            this.callbackInput = callbackInput;
            return this;
        }
        
        public ThirdPartyDataInput build() {
            return new ThirdPartyDataInput(
                partnerId,
                queryShape,
                callbackInput);
        }
    }
}
