/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GraphQLRequestInput
 * 
 * <p>Required fields for executing a GraphQL query
 */
public class GraphQLRequestInput {
    /**
     * The GraphQL query to execute.
     */
    @JsonProperty("request")
    private String request;

    /**
     * Variables to substitute into the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variables")
    private JsonNullable<? extends Map<String, Object>> variables;

    @JsonCreator
    public GraphQLRequestInput(
            @JsonProperty("request") String request,
            @JsonProperty("variables") JsonNullable<? extends Map<String, Object>> variables) {
        Utils.checkNotNull(request, "request");
        Utils.checkNotNull(variables, "variables");
        this.request = request;
        this.variables = variables;
    }
    
    public GraphQLRequestInput(
            String request) {
        this(request, JsonNullable.undefined());
    }

    /**
     * The GraphQL query to execute.
     */
    @JsonIgnore
    public String request() {
        return request;
    }

    /**
     * Variables to substitute into the query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> variables() {
        return (JsonNullable<Map<String, Object>>) variables;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The GraphQL query to execute.
     */
    public GraphQLRequestInput withRequest(String request) {
        Utils.checkNotNull(request, "request");
        this.request = request;
        return this;
    }

    /**
     * Variables to substitute into the query.
     */
    public GraphQLRequestInput withVariables(Map<String, Object> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = JsonNullable.of(variables);
        return this;
    }

    /**
     * Variables to substitute into the query.
     */
    public GraphQLRequestInput withVariables(JsonNullable<? extends Map<String, Object>> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = variables;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GraphQLRequestInput other = (GraphQLRequestInput) o;
        return 
            Utils.enhancedDeepEquals(this.request, other.request) &&
            Utils.enhancedDeepEquals(this.variables, other.variables);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            request, variables);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GraphQLRequestInput.class,
                "request", request,
                "variables", variables);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String request;

        private JsonNullable<? extends Map<String, Object>> variables = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The GraphQL query to execute.
         */
        public Builder request(String request) {
            Utils.checkNotNull(request, "request");
            this.request = request;
            return this;
        }


        /**
         * Variables to substitute into the query.
         */
        public Builder variables(Map<String, Object> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = JsonNullable.of(variables);
            return this;
        }

        /**
         * Variables to substitute into the query.
         */
        public Builder variables(JsonNullable<? extends Map<String, Object>> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = variables;
            return this;
        }

        public GraphQLRequestInput build() {

            return new GraphQLRequestInput(
                request, variables);
        }

    }
}
