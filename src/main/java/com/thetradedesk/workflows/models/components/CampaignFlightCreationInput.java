/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class CampaignFlightCreationInput {

    /**
     * The date and time (in UTC) when the campaign flight is to start spending.
     */
    @JsonProperty("startDateInclusiveUTC")
    private OffsetDateTime startDateInclusiveUTC;

    /**
     * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateExclusiveUTC")
    private JsonNullable<OffsetDateTime> endDateExclusiveUTC;

    /**
     * The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign.
     */
    @JsonProperty("budgetInAdvertiserCurrency")
    private double budgetInAdvertiserCurrency;

    /**
     * The maximum amount of impressions the campaign flight should buy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budgetInImpressions")
    private JsonNullable<Long> budgetInImpressions;

    /**
     * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dailyTargetInAdvertiserCurrency")
    private JsonNullable<Double> dailyTargetInAdvertiserCurrency;

    /**
     * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dailyTargetInImpressions")
    private JsonNullable<Long> dailyTargetInImpressions;

    @JsonCreator
    public CampaignFlightCreationInput(
            @JsonProperty("startDateInclusiveUTC") OffsetDateTime startDateInclusiveUTC,
            @JsonProperty("endDateExclusiveUTC") JsonNullable<OffsetDateTime> endDateExclusiveUTC,
            @JsonProperty("budgetInAdvertiserCurrency") double budgetInAdvertiserCurrency,
            @JsonProperty("budgetInImpressions") JsonNullable<Long> budgetInImpressions,
            @JsonProperty("dailyTargetInAdvertiserCurrency") JsonNullable<Double> dailyTargetInAdvertiserCurrency,
            @JsonProperty("dailyTargetInImpressions") JsonNullable<Long> dailyTargetInImpressions) {
        Utils.checkNotNull(startDateInclusiveUTC, "startDateInclusiveUTC");
        Utils.checkNotNull(endDateExclusiveUTC, "endDateExclusiveUTC");
        Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.startDateInclusiveUTC = startDateInclusiveUTC;
        this.endDateExclusiveUTC = endDateExclusiveUTC;
        this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
        this.budgetInImpressions = budgetInImpressions;
        this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
        this.dailyTargetInImpressions = dailyTargetInImpressions;
    }
    
    public CampaignFlightCreationInput(
            OffsetDateTime startDateInclusiveUTC,
            double budgetInAdvertiserCurrency) {
        this(startDateInclusiveUTC, JsonNullable.undefined(), budgetInAdvertiserCurrency, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The date and time (in UTC) when the campaign flight is to start spending.
     */
    @JsonIgnore
    public OffsetDateTime startDateInclusiveUTC() {
        return startDateInclusiveUTC;
    }

    /**
     * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endDateExclusiveUTC() {
        return endDateExclusiveUTC;
    }

    /**
     * The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign.
     */
    @JsonIgnore
    public double budgetInAdvertiserCurrency() {
        return budgetInAdvertiserCurrency;
    }

    /**
     * The maximum amount of impressions the campaign flight should buy.
     */
    @JsonIgnore
    public JsonNullable<Long> budgetInImpressions() {
        return budgetInImpressions;
    }

    /**
     * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
     */
    @JsonIgnore
    public JsonNullable<Double> dailyTargetInAdvertiserCurrency() {
        return dailyTargetInAdvertiserCurrency;
    }

    /**
     * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
     */
    @JsonIgnore
    public JsonNullable<Long> dailyTargetInImpressions() {
        return dailyTargetInImpressions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The date and time (in UTC) when the campaign flight is to start spending.
     */
    public CampaignFlightCreationInput withStartDateInclusiveUTC(OffsetDateTime startDateInclusiveUTC) {
        Utils.checkNotNull(startDateInclusiveUTC, "startDateInclusiveUTC");
        this.startDateInclusiveUTC = startDateInclusiveUTC;
        return this;
    }

    /**
     * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
     */
    public CampaignFlightCreationInput withEndDateExclusiveUTC(OffsetDateTime endDateExclusiveUTC) {
        Utils.checkNotNull(endDateExclusiveUTC, "endDateExclusiveUTC");
        this.endDateExclusiveUTC = JsonNullable.of(endDateExclusiveUTC);
        return this;
    }

    /**
     * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
     */
    public CampaignFlightCreationInput withEndDateExclusiveUTC(JsonNullable<OffsetDateTime> endDateExclusiveUTC) {
        Utils.checkNotNull(endDateExclusiveUTC, "endDateExclusiveUTC");
        this.endDateExclusiveUTC = endDateExclusiveUTC;
        return this;
    }

    /**
     * The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign.
     */
    public CampaignFlightCreationInput withBudgetInAdvertiserCurrency(double budgetInAdvertiserCurrency) {
        Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
        this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
        return this;
    }

    /**
     * The maximum amount of impressions the campaign flight should buy.
     */
    public CampaignFlightCreationInput withBudgetInImpressions(long budgetInImpressions) {
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        this.budgetInImpressions = JsonNullable.of(budgetInImpressions);
        return this;
    }

    /**
     * The maximum amount of impressions the campaign flight should buy.
     */
    public CampaignFlightCreationInput withBudgetInImpressions(JsonNullable<Long> budgetInImpressions) {
        Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
        this.budgetInImpressions = budgetInImpressions;
        return this;
    }

    /**
     * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
     */
    public CampaignFlightCreationInput withDailyTargetInAdvertiserCurrency(double dailyTargetInAdvertiserCurrency) {
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        this.dailyTargetInAdvertiserCurrency = JsonNullable.of(dailyTargetInAdvertiserCurrency);
        return this;
    }

    /**
     * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
     */
    public CampaignFlightCreationInput withDailyTargetInAdvertiserCurrency(JsonNullable<Double> dailyTargetInAdvertiserCurrency) {
        Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
        this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
        return this;
    }

    /**
     * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
     */
    public CampaignFlightCreationInput withDailyTargetInImpressions(long dailyTargetInImpressions) {
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.dailyTargetInImpressions = JsonNullable.of(dailyTargetInImpressions);
        return this;
    }

    /**
     * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
     */
    public CampaignFlightCreationInput withDailyTargetInImpressions(JsonNullable<Long> dailyTargetInImpressions) {
        Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
        this.dailyTargetInImpressions = dailyTargetInImpressions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CampaignFlightCreationInput other = (CampaignFlightCreationInput) o;
        return 
            Objects.deepEquals(this.startDateInclusiveUTC, other.startDateInclusiveUTC) &&
            Objects.deepEquals(this.endDateExclusiveUTC, other.endDateExclusiveUTC) &&
            Objects.deepEquals(this.budgetInAdvertiserCurrency, other.budgetInAdvertiserCurrency) &&
            Objects.deepEquals(this.budgetInImpressions, other.budgetInImpressions) &&
            Objects.deepEquals(this.dailyTargetInAdvertiserCurrency, other.dailyTargetInAdvertiserCurrency) &&
            Objects.deepEquals(this.dailyTargetInImpressions, other.dailyTargetInImpressions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startDateInclusiveUTC,
            endDateExclusiveUTC,
            budgetInAdvertiserCurrency,
            budgetInImpressions,
            dailyTargetInAdvertiserCurrency,
            dailyTargetInImpressions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CampaignFlightCreationInput.class,
                "startDateInclusiveUTC", startDateInclusiveUTC,
                "endDateExclusiveUTC", endDateExclusiveUTC,
                "budgetInAdvertiserCurrency", budgetInAdvertiserCurrency,
                "budgetInImpressions", budgetInImpressions,
                "dailyTargetInAdvertiserCurrency", dailyTargetInAdvertiserCurrency,
                "dailyTargetInImpressions", dailyTargetInImpressions);
    }
    
    public final static class Builder {
 
        private OffsetDateTime startDateInclusiveUTC;
 
        private JsonNullable<OffsetDateTime> endDateExclusiveUTC = JsonNullable.undefined();
 
        private Double budgetInAdvertiserCurrency;
 
        private JsonNullable<Long> budgetInImpressions = JsonNullable.undefined();
 
        private JsonNullable<Double> dailyTargetInAdvertiserCurrency = JsonNullable.undefined();
 
        private JsonNullable<Long> dailyTargetInImpressions = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date and time (in UTC) when the campaign flight is to start spending.
         */
        public Builder startDateInclusiveUTC(OffsetDateTime startDateInclusiveUTC) {
            Utils.checkNotNull(startDateInclusiveUTC, "startDateInclusiveUTC");
            this.startDateInclusiveUTC = startDateInclusiveUTC;
            return this;
        }

        /**
         * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
         */
        public Builder endDateExclusiveUTC(OffsetDateTime endDateExclusiveUTC) {
            Utils.checkNotNull(endDateExclusiveUTC, "endDateExclusiveUTC");
            this.endDateExclusiveUTC = JsonNullable.of(endDateExclusiveUTC);
            return this;
        }

        /**
         * The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past.
         */
        public Builder endDateExclusiveUTC(JsonNullable<OffsetDateTime> endDateExclusiveUTC) {
            Utils.checkNotNull(endDateExclusiveUTC, "endDateExclusiveUTC");
            this.endDateExclusiveUTC = endDateExclusiveUTC;
            return this;
        }

        /**
         * The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign.
         */
        public Builder budgetInAdvertiserCurrency(double budgetInAdvertiserCurrency) {
            Utils.checkNotNull(budgetInAdvertiserCurrency, "budgetInAdvertiserCurrency");
            this.budgetInAdvertiserCurrency = budgetInAdvertiserCurrency;
            return this;
        }

        /**
         * The maximum amount of impressions the campaign flight should buy.
         */
        public Builder budgetInImpressions(long budgetInImpressions) {
            Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
            this.budgetInImpressions = JsonNullable.of(budgetInImpressions);
            return this;
        }

        /**
         * The maximum amount of impressions the campaign flight should buy.
         */
        public Builder budgetInImpressions(JsonNullable<Long> budgetInImpressions) {
            Utils.checkNotNull(budgetInImpressions, "budgetInImpressions");
            this.budgetInImpressions = budgetInImpressions;
            return this;
        }

        /**
         * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
         */
        public Builder dailyTargetInAdvertiserCurrency(double dailyTargetInAdvertiserCurrency) {
            Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
            this.dailyTargetInAdvertiserCurrency = JsonNullable.of(dailyTargetInAdvertiserCurrency);
            return this;
        }

        /**
         * The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign.
         */
        public Builder dailyTargetInAdvertiserCurrency(JsonNullable<Double> dailyTargetInAdvertiserCurrency) {
            Utils.checkNotNull(dailyTargetInAdvertiserCurrency, "dailyTargetInAdvertiserCurrency");
            this.dailyTargetInAdvertiserCurrency = dailyTargetInAdvertiserCurrency;
            return this;
        }

        /**
         * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
         */
        public Builder dailyTargetInImpressions(long dailyTargetInImpressions) {
            Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
            this.dailyTargetInImpressions = JsonNullable.of(dailyTargetInImpressions);
            return this;
        }

        /**
         * The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null.
         */
        public Builder dailyTargetInImpressions(JsonNullable<Long> dailyTargetInImpressions) {
            Utils.checkNotNull(dailyTargetInImpressions, "dailyTargetInImpressions");
            this.dailyTargetInImpressions = dailyTargetInImpressions;
            return this;
        }
        
        public CampaignFlightCreationInput build() {
            return new CampaignFlightCreationInput(
                startDateInclusiveUTC,
                endDateExclusiveUTC,
                budgetInAdvertiserCurrency,
                budgetInImpressions,
                dailyTargetInAdvertiserCurrency,
                dailyTargetInImpressions);
        }
    }
}
