/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.thetradedesk.workflows.models.errors;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
@SuppressWarnings("serial")
public class ProblemDetailsException extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<Integer> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detail")
    private JsonNullable<String> detail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private JsonNullable<String> instance;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public ProblemDetailsException(
            @JsonProperty("type") JsonNullable<String> type,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("status") JsonNullable<Integer> status,
            @JsonProperty("detail") JsonNullable<String> detail,
            @JsonProperty("instance") JsonNullable<String> instance) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(instance, "instance");
        this.type = type;
        this.title = title;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
        this.additionalProperties = new HashMap<>();
    }
    
    public ProblemDetailsException() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    public JsonNullable<String> type(){
        return type;
    }

    public JsonNullable<String> title(){
        return title;
    }

    public JsonNullable<Integer> status(){
        return status;
    }

    public JsonNullable<String> detail(){
        return detail;
    }

    public JsonNullable<String> instance(){
        return instance;
    }

    @SuppressWarnings("unchecked")
    public Map<String, Object> additionalProperties(){
        return (Optional<Map<String, Object>>) additionalProperties;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ProblemDetailsException withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    public ProblemDetailsException withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ProblemDetailsException withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    public ProblemDetailsException withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public ProblemDetailsException withStatus(int status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public ProblemDetailsException withStatus(JsonNullable<Integer> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ProblemDetailsException withDetail(String detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = JsonNullable.of(detail);
        return this;
    }

    public ProblemDetailsException withDetail(JsonNullable<String> detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    public ProblemDetailsException withInstance(String instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = JsonNullable.of(instance);
        return this;
    }

    public ProblemDetailsException withInstance(JsonNullable<String> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }

    public ProblemDetailsException withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = Optional.ofNullable(additionalProperties);
        return this;
    }
    
    public ProblemDetailsException withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProblemDetailsException other = (ProblemDetailsException) o;
        return
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.detail, other.detail) &&
            Objects.deepEquals(this.instance, other.instance) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            title,
            status,
            detail,
            instance,
            additionalProperties);
    }

    @Override
    public String toString() {
        return Utils.toString(ProblemDetailsException.class,
                "type", type,
                "title", title,
                "status", status,
                "detail", detail,
                "instance", instance,
                "additionalProperties", additionalProperties);
    }

    public final static class Builder {

        private JsonNullable<String> type = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<Integer> status = JsonNullable.undefined();

        private JsonNullable<String> detail = JsonNullable.undefined();

        private JsonNullable<String> instance = JsonNullable.undefined();

        private Map<String, Object> additionalProperties = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder status(int status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<Integer> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder detail(String detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = JsonNullable.of(detail);
            return this;
        }

        public Builder detail(JsonNullable<String> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        public Builder instance(String instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = JsonNullable.of(instance);
            return this;
        }

        public Builder instance(JsonNullable<String> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = Optional.ofNullable(additionalProperties);
            return this;
        }
        
        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public ProblemDetailsException build() {
            return new ProblemDetailsException(
                type,
                title,
                status,
                detail,
                instance,
                additionalProperties);
        }
    }
}
