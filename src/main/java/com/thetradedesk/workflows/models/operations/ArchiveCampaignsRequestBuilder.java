/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.operations;

import static com.thetradedesk.workflows.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.thetradedesk.workflows.SDKConfiguration;
import com.thetradedesk.workflows.operations.ArchiveCampaignsOperation;
import com.thetradedesk.workflows.utils.LazySingletonValue;
import com.thetradedesk.workflows.utils.Options;
import com.thetradedesk.workflows.utils.RetryConfig;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class ArchiveCampaignsRequestBuilder {

    private Optional<Boolean> forceArchive = Utils.readDefaultOrConstValue(
                            "forceArchive",
                            "false",
                            new TypeReference<Optional<Boolean>>() {});
    private Optional<? extends List<String>> requestBody = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ArchiveCampaignsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public ArchiveCampaignsRequestBuilder forceArchive(boolean forceArchive) {
        Utils.checkNotNull(forceArchive, "forceArchive");
        this.forceArchive = Optional.of(forceArchive);
        return this;
    }

    public ArchiveCampaignsRequestBuilder forceArchive(Optional<Boolean> forceArchive) {
        Utils.checkNotNull(forceArchive, "forceArchive");
        this.forceArchive = forceArchive;
        return this;
    }
                
    public ArchiveCampaignsRequestBuilder requestBody(List<String> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.of(requestBody);
        return this;
    }

    public ArchiveCampaignsRequestBuilder requestBody(Optional<? extends List<String>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
                
    public ArchiveCampaignsRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ArchiveCampaignsRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ArchiveCampaignsRequest buildRequest() {
        if (forceArchive == null) {
            forceArchive = _SINGLETON_VALUE_ForceArchive.value();
        }

        ArchiveCampaignsRequest request = new ArchiveCampaignsRequest(forceArchive,
            requestBody);

        return request;
    }

    public ArchiveCampaignsResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ArchiveCampaignsRequest, ArchiveCampaignsResponse> operation
              = new ArchiveCampaignsOperation(
                sdkConfiguration,
                options);
        ArchiveCampaignsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }

    private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ForceArchive =
            new LazySingletonValue<>(
                    "forceArchive",
                    "false",
                    new TypeReference<Optional<Boolean>>() {});
}
