/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.thetradedesk.workflows.utils.LazySingletonValue;
import com.thetradedesk.workflows.utils.SpeakeasyMetadata;
import com.thetradedesk.workflows.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class ArchiveCampaignsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=forceArchive")
    private Optional<Boolean> forceArchive;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends List<String>> requestBody;

    @JsonCreator
    public ArchiveCampaignsRequest(
            Optional<Boolean> forceArchive,
            Optional<? extends List<String>> requestBody) {
        Utils.checkNotNull(forceArchive, "forceArchive");
        Utils.checkNotNull(requestBody, "requestBody");
        this.forceArchive = forceArchive;
        this.requestBody = requestBody;
    }
    
    public ArchiveCampaignsRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> forceArchive() {
        return forceArchive;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> requestBody() {
        return (Optional<List<String>>) requestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ArchiveCampaignsRequest withForceArchive(boolean forceArchive) {
        Utils.checkNotNull(forceArchive, "forceArchive");
        this.forceArchive = Optional.ofNullable(forceArchive);
        return this;
    }


    public ArchiveCampaignsRequest withForceArchive(Optional<Boolean> forceArchive) {
        Utils.checkNotNull(forceArchive, "forceArchive");
        this.forceArchive = forceArchive;
        return this;
    }

    public ArchiveCampaignsRequest withRequestBody(List<String> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }


    public ArchiveCampaignsRequest withRequestBody(Optional<? extends List<String>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ArchiveCampaignsRequest other = (ArchiveCampaignsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.forceArchive, other.forceArchive) &&
            Utils.enhancedDeepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            forceArchive, requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ArchiveCampaignsRequest.class,
                "forceArchive", forceArchive,
                "requestBody", requestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> forceArchive;

        private Optional<? extends List<String>> requestBody = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder forceArchive(boolean forceArchive) {
            Utils.checkNotNull(forceArchive, "forceArchive");
            this.forceArchive = Optional.ofNullable(forceArchive);
            return this;
        }

        public Builder forceArchive(Optional<Boolean> forceArchive) {
            Utils.checkNotNull(forceArchive, "forceArchive");
            this.forceArchive = forceArchive;
            return this;
        }


        public Builder requestBody(List<String> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends List<String>> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public ArchiveCampaignsRequest build() {
            if (forceArchive == null) {
                forceArchive = _SINGLETON_VALUE_ForceArchive.value();
            }

            return new ArchiveCampaignsRequest(
                forceArchive, requestBody);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ForceArchive =
                new LazySingletonValue<>(
                        "forceArchive",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
