/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows;

import static com.thetradedesk.workflows.operations.Operations.RequestOperation;

import com.thetradedesk.workflows.models.components.CampaignBulkCreateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.CampaignBulkUpdateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.CampaignCreateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.CampaignUpdateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.operations.ArchiveCampaignsRequest;
import com.thetradedesk.workflows.models.operations.ArchiveCampaignsRequestBuilder;
import com.thetradedesk.workflows.models.operations.ArchiveCampaignsResponse;
import com.thetradedesk.workflows.models.operations.CreateCampaignRequestBuilder;
import com.thetradedesk.workflows.models.operations.CreateCampaignResponse;
import com.thetradedesk.workflows.models.operations.CreateCampaignsJobRequestBuilder;
import com.thetradedesk.workflows.models.operations.CreateCampaignsJobResponse;
import com.thetradedesk.workflows.models.operations.GetCampaignVersionRequest;
import com.thetradedesk.workflows.models.operations.GetCampaignVersionRequestBuilder;
import com.thetradedesk.workflows.models.operations.GetCampaignVersionResponse;
import com.thetradedesk.workflows.models.operations.UpdateCampaignRequestBuilder;
import com.thetradedesk.workflows.models.operations.UpdateCampaignResponse;
import com.thetradedesk.workflows.models.operations.UpdateCampaignsJobRequestBuilder;
import com.thetradedesk.workflows.models.operations.UpdateCampaignsJobResponse;
import com.thetradedesk.workflows.operations.ArchiveCampaignsOperation;
import com.thetradedesk.workflows.operations.CreateCampaignOperation;
import com.thetradedesk.workflows.operations.CreateCampaignsJobOperation;
import com.thetradedesk.workflows.operations.GetCampaignVersionOperation;
import com.thetradedesk.workflows.operations.UpdateCampaignOperation;
import com.thetradedesk.workflows.operations.UpdateCampaignsJobOperation;
import com.thetradedesk.workflows.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Campaign {
    private final SDKConfiguration sdkConfiguration;

    Campaign(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create a new campaign with required fields
     * 
     * @return The call builder
     */
    public CreateCampaignRequestBuilder create() {
        return new CreateCampaignRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new campaign with required fields
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCampaignResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a new campaign with required fields
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCampaignResponse create(
            Optional<? extends CampaignCreateWorkflowInputWithValidation> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CampaignCreateWorkflowInputWithValidation>, CreateCampaignResponse> operation
              = new CreateCampaignOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a campaign with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @return The call builder
     */
    public UpdateCampaignRequestBuilder updateCampaign() {
        return new UpdateCampaignRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a campaign with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCampaignResponse updateCampaignDirect() throws Exception {
        return updateCampaign(Optional.empty(), Optional.empty());
    }

    /**
     * Update a campaign with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCampaignResponse updateCampaign(
            Optional<? extends CampaignUpdateWorkflowInputWithValidation> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CampaignUpdateWorkflowInputWithValidation>, UpdateCampaignResponse> operation
              = new UpdateCampaignOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create multiple new campaigns with required fields
     * 
     * @return The call builder
     */
    public CreateCampaignsJobRequestBuilder createCampaignsJob() {
        return new CreateCampaignsJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Create multiple new campaigns with required fields
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCampaignsJobResponse createCampaignsJobDirect() throws Exception {
        return createCampaignsJob(Optional.empty(), Optional.empty());
    }

    /**
     * Create multiple new campaigns with required fields
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCampaignsJobResponse createCampaignsJob(
            Optional<? extends CampaignBulkCreateWorkflowInputWithValidation> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CampaignBulkCreateWorkflowInputWithValidation>, CreateCampaignsJobResponse> operation
              = new CreateCampaignsJobOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update multiple campaigns with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific campaign will be updated.
     * 
     * @return The call builder
     */
    public UpdateCampaignsJobRequestBuilder updateCampaignsJob() {
        return new UpdateCampaignsJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Update multiple campaigns with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific campaign will be updated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCampaignsJobResponse updateCampaignsJobDirect() throws Exception {
        return updateCampaignsJob(Optional.empty(), Optional.empty());
    }

    /**
     * Update multiple campaigns with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific campaign will be updated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCampaignsJobResponse updateCampaignsJob(
            Optional<? extends CampaignBulkUpdateWorkflowInputWithValidation> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CampaignBulkUpdateWorkflowInputWithValidation>, UpdateCampaignsJobResponse> operation
              = new UpdateCampaignsJobOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Archive multiple campaigns
     * 
     * <p>**NOTE**: Once archived, campaigns cannot be un-archived.
     * 
     * @return The call builder
     */
    public ArchiveCampaignsRequestBuilder archiveCampaigns() {
        return new ArchiveCampaignsRequestBuilder(sdkConfiguration);
    }

    /**
     * Archive multiple campaigns
     * 
     * <p>**NOTE**: Once archived, campaigns cannot be un-archived.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ArchiveCampaignsResponse archiveCampaignsDirect() throws Exception {
        return archiveCampaigns(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Archive multiple campaigns
     * 
     * <p>**NOTE**: Once archived, campaigns cannot be un-archived.
     * 
     * @param forceArchive 
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ArchiveCampaignsResponse archiveCampaigns(
            Optional<Boolean> forceArchive,
            Optional<? extends List<String>> requestBody,
            Optional<Options> options) throws Exception {
        ArchiveCampaignsRequest request =
            ArchiveCampaignsRequest
                .builder()
                .forceArchive(forceArchive)
                .requestBody(requestBody)
                .build();
        RequestOperation<ArchiveCampaignsRequest, ArchiveCampaignsResponse> operation
              = new ArchiveCampaignsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a campaign's version
     * 
     * @return The call builder
     */
    public GetCampaignVersionRequestBuilder getVersion() {
        return new GetCampaignVersionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a campaign's version
     * 
     * @param id 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCampaignVersionResponse getVersion(String id) throws Exception {
        return getVersion(id, Optional.empty());
    }

    /**
     * Get a campaign's version
     * 
     * @param id 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCampaignVersionResponse getVersion(
            String id,
            Optional<Options> options) throws Exception {
        GetCampaignVersionRequest request =
            GetCampaignVersionRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetCampaignVersionRequest, GetCampaignVersionResponse> operation
              = new GetCampaignVersionOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
