/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.thetradedesk.workflows;

import static com.thetradedesk.workflows.operations.Operations.RequestOperation;

import com.thetradedesk.workflows.models.components.AdGroupBulkCreateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.AdGroupBulkUpdateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.AdGroupCreateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.components.AdGroupUpdateWorkflowInputWithValidation;
import com.thetradedesk.workflows.models.operations.ArchiveAdGroupsRequest;
import com.thetradedesk.workflows.models.operations.ArchiveAdGroupsRequestBuilder;
import com.thetradedesk.workflows.models.operations.ArchiveAdGroupsResponse;
import com.thetradedesk.workflows.models.operations.CreateAdGroupRequestBuilder;
import com.thetradedesk.workflows.models.operations.CreateAdGroupResponse;
import com.thetradedesk.workflows.models.operations.CreateAdGroupsJobRequestBuilder;
import com.thetradedesk.workflows.models.operations.CreateAdGroupsJobResponse;
import com.thetradedesk.workflows.models.operations.UpdateAdGroupRequestBuilder;
import com.thetradedesk.workflows.models.operations.UpdateAdGroupResponse;
import com.thetradedesk.workflows.models.operations.UpdateAdGroupsJobRequestBuilder;
import com.thetradedesk.workflows.models.operations.UpdateAdGroupsJobResponse;
import com.thetradedesk.workflows.operations.ArchiveAdGroupsOperation;
import com.thetradedesk.workflows.operations.CreateAdGroupOperation;
import com.thetradedesk.workflows.operations.CreateAdGroupsJobOperation;
import com.thetradedesk.workflows.operations.UpdateAdGroupOperation;
import com.thetradedesk.workflows.operations.UpdateAdGroupsJobOperation;
import com.thetradedesk.workflows.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class AdGroup {
    private final SDKConfiguration sdkConfiguration;

    AdGroup(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a new ad group with required fields
     * 
     * @return The call builder
     */
    public CreateAdGroupRequestBuilder createAdGroup() {
        return new CreateAdGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new ad group with required fields
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAdGroupResponse createAdGroupDirect() throws Exception {
        return createAdGroup(Optional.empty(), Optional.empty());
    }

    /**
     * Create a new ad group with required fields
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAdGroupResponse createAdGroup(Optional<? extends AdGroupCreateWorkflowInputWithValidation> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends AdGroupCreateWorkflowInputWithValidation>, CreateAdGroupResponse> operation
              = new CreateAdGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an ad group with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @return The call builder
     */
    public UpdateAdGroupRequestBuilder updateAdGroup() {
        return new UpdateAdGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an ad group with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAdGroupResponse updateAdGroupDirect() throws Exception {
        return updateAdGroup(Optional.empty(), Optional.empty());
    }

    /**
     * Update an ad group with specified fields
     * 
     * <p>Only the fields provided in the request payload will be updated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAdGroupResponse updateAdGroup(Optional<? extends AdGroupUpdateWorkflowInputWithValidation> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends AdGroupUpdateWorkflowInputWithValidation>, UpdateAdGroupResponse> operation
              = new UpdateAdGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Archive multiple ad groups
     * 
     * <p>**NOTE**: Once archived, ad groups cannot be un-archived.
     * 
     * @return The call builder
     */
    public ArchiveAdGroupsRequestBuilder archiveAdGroups() {
        return new ArchiveAdGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * Archive multiple ad groups
     * 
     * <p>**NOTE**: Once archived, ad groups cannot be un-archived.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ArchiveAdGroupsResponse archiveAdGroupsDirect() throws Exception {
        return archiveAdGroups(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Archive multiple ad groups
     * 
     * <p>**NOTE**: Once archived, ad groups cannot be un-archived.
     * 
     * @param forceArchive 
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ArchiveAdGroupsResponse archiveAdGroups(
            Optional<Boolean> forceArchive, Optional<? extends List<String>> requestBody,
            Optional<Options> options) throws Exception {
        ArchiveAdGroupsRequest request =
            ArchiveAdGroupsRequest
                .builder()
                .forceArchive(forceArchive)
                .requestBody(requestBody)
                .build();
        RequestOperation<ArchiveAdGroupsRequest, ArchiveAdGroupsResponse> operation
              = new ArchiveAdGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create multiple new ad groups with required fields
     * 
     * @return The call builder
     */
    public CreateAdGroupsJobRequestBuilder createAdGroupsJob() {
        return new CreateAdGroupsJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Create multiple new ad groups with required fields
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAdGroupsJobResponse createAdGroupsJobDirect() throws Exception {
        return createAdGroupsJob(Optional.empty(), Optional.empty());
    }

    /**
     * Create multiple new ad groups with required fields
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAdGroupsJobResponse createAdGroupsJob(Optional<? extends AdGroupBulkCreateWorkflowInputWithValidation> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends AdGroupBulkCreateWorkflowInputWithValidation>, CreateAdGroupsJobResponse> operation
              = new CreateAdGroupsJobOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update multiple ad groups with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific ad group will be updated.
     * 
     * @return The call builder
     */
    public UpdateAdGroupsJobRequestBuilder updateAdGroupsJob() {
        return new UpdateAdGroupsJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Update multiple ad groups with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific ad group will be updated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAdGroupsJobResponse updateAdGroupsJobDirect() throws Exception {
        return updateAdGroupsJob(Optional.empty(), Optional.empty());
    }

    /**
     * Update multiple ad groups with specified fields
     * 
     * <p>Only the fields provided in the request payload for each specific ad group will be updated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAdGroupsJobResponse updateAdGroupsJob(Optional<? extends AdGroupBulkUpdateWorkflowInputWithValidation> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends AdGroupBulkUpdateWorkflowInputWithValidation>, UpdateAdGroupsJobResponse> operation
              = new UpdateAdGroupsJobOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
